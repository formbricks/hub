// Code generated by ent, DO NOT EDIT.

package enrichmentjob

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the enrichmentjob type in the database.
	Label = "enrichment_job"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldExperienceID holds the string denoting the experience_id field in the database.
	FieldExperienceID = "experience_id"
	// FieldJobType holds the string denoting the job_type field in the database.
	FieldJobType = "job_type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldError holds the string denoting the error field in the database.
	FieldError = "error"
	// FieldAttempts holds the string denoting the attempts field in the database.
	FieldAttempts = "attempts"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldProcessedAt holds the string denoting the processed_at field in the database.
	FieldProcessedAt = "processed_at"
	// EdgeExperience holds the string denoting the experience edge name in mutations.
	EdgeExperience = "experience"
	// Table holds the table name of the enrichmentjob in the database.
	Table = "enrichment_jobs"
	// ExperienceTable is the table that holds the experience relation/edge.
	ExperienceTable = "enrichment_jobs"
	// ExperienceInverseTable is the table name for the ExperienceData entity.
	// It exists in this package in order to avoid circular dependency with the "experiencedata" package.
	ExperienceInverseTable = "experience_data"
	// ExperienceColumn is the table column denoting the experience relation/edge.
	ExperienceColumn = "experience_id"
)

// Columns holds all SQL columns for enrichmentjob fields.
var Columns = []string{
	FieldID,
	FieldExperienceID,
	FieldJobType,
	FieldStatus,
	FieldText,
	FieldError,
	FieldAttempts,
	FieldCreatedAt,
	FieldProcessedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultJobType holds the default value on creation for the "job_type" field.
	DefaultJobType string
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultAttempts holds the default value on creation for the "attempts" field.
	DefaultAttempts int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the EnrichmentJob queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByExperienceID orders the results by the experience_id field.
func ByExperienceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExperienceID, opts...).ToFunc()
}

// ByJobType orders the results by the job_type field.
func ByJobType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByError orders the results by the error field.
func ByError(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldError, opts...).ToFunc()
}

// ByAttempts orders the results by the attempts field.
func ByAttempts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttempts, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByProcessedAt orders the results by the processed_at field.
func ByProcessedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessedAt, opts...).ToFunc()
}

// ByExperienceField orders the results by experience field.
func ByExperienceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExperienceStep(), sql.OrderByField(field, opts...))
	}
}
func newExperienceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExperienceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ExperienceTable, ExperienceColumn),
	)
}
