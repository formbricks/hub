// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/formbricks/formbricks-rewrite/apps/store/internal/ent/enrichmentjob"
	"github.com/formbricks/formbricks-rewrite/apps/store/internal/ent/experiencedata"
	"github.com/google/uuid"
)

// EnrichmentJob is the model entity for the EnrichmentJob schema.
type EnrichmentJob struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ExperienceID holds the value of the "experience_id" field.
	ExperienceID uuid.UUID `json:"experience_id,omitempty"`
	// Job type: enrichment (sentiment/topics) or embedding (vector generation)
	JobType string `json:"job_type,omitempty"`
	// Job status: pending, processing, completed, failed
	Status string `json:"status,omitempty"`
	// Text content to be enriched or embedded
	Text string `json:"text,omitempty"`
	// Error message if job failed
	Error *string `json:"error,omitempty"`
	// Number of processing attempts
	Attempts int `json:"attempts,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// ProcessedAt holds the value of the "processed_at" field.
	ProcessedAt *time.Time `json:"processed_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EnrichmentJobQuery when eager-loading is set.
	Edges        EnrichmentJobEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EnrichmentJobEdges holds the relations/edges for other nodes in the graph.
type EnrichmentJobEdges struct {
	// Experience holds the value of the experience edge.
	Experience *ExperienceData `json:"experience,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ExperienceOrErr returns the Experience value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnrichmentJobEdges) ExperienceOrErr() (*ExperienceData, error) {
	if e.Experience != nil {
		return e.Experience, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: experiencedata.Label}
	}
	return nil, &NotLoadedError{edge: "experience"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EnrichmentJob) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case enrichmentjob.FieldAttempts:
			values[i] = new(sql.NullInt64)
		case enrichmentjob.FieldJobType, enrichmentjob.FieldStatus, enrichmentjob.FieldText, enrichmentjob.FieldError:
			values[i] = new(sql.NullString)
		case enrichmentjob.FieldCreatedAt, enrichmentjob.FieldProcessedAt:
			values[i] = new(sql.NullTime)
		case enrichmentjob.FieldID, enrichmentjob.FieldExperienceID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EnrichmentJob fields.
func (ej *EnrichmentJob) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case enrichmentjob.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ej.ID = *value
			}
		case enrichmentjob.FieldExperienceID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field experience_id", values[i])
			} else if value != nil {
				ej.ExperienceID = *value
			}
		case enrichmentjob.FieldJobType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_type", values[i])
			} else if value.Valid {
				ej.JobType = value.String
			}
		case enrichmentjob.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ej.Status = value.String
			}
		case enrichmentjob.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				ej.Text = value.String
			}
		case enrichmentjob.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value.Valid {
				ej.Error = new(string)
				*ej.Error = value.String
			}
		case enrichmentjob.FieldAttempts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attempts", values[i])
			} else if value.Valid {
				ej.Attempts = int(value.Int64)
			}
		case enrichmentjob.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ej.CreatedAt = value.Time
			}
		case enrichmentjob.FieldProcessedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field processed_at", values[i])
			} else if value.Valid {
				ej.ProcessedAt = new(time.Time)
				*ej.ProcessedAt = value.Time
			}
		default:
			ej.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EnrichmentJob.
// This includes values selected through modifiers, order, etc.
func (ej *EnrichmentJob) Value(name string) (ent.Value, error) {
	return ej.selectValues.Get(name)
}

// QueryExperience queries the "experience" edge of the EnrichmentJob entity.
func (ej *EnrichmentJob) QueryExperience() *ExperienceDataQuery {
	return NewEnrichmentJobClient(ej.config).QueryExperience(ej)
}

// Update returns a builder for updating this EnrichmentJob.
// Note that you need to call EnrichmentJob.Unwrap() before calling this method if this EnrichmentJob
// was returned from a transaction, and the transaction was committed or rolled back.
func (ej *EnrichmentJob) Update() *EnrichmentJobUpdateOne {
	return NewEnrichmentJobClient(ej.config).UpdateOne(ej)
}

// Unwrap unwraps the EnrichmentJob entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ej *EnrichmentJob) Unwrap() *EnrichmentJob {
	_tx, ok := ej.config.driver.(*txDriver)
	if !ok {
		panic("ent: EnrichmentJob is not a transactional entity")
	}
	ej.config.driver = _tx.drv
	return ej
}

// String implements the fmt.Stringer.
func (ej *EnrichmentJob) String() string {
	var builder strings.Builder
	builder.WriteString("EnrichmentJob(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ej.ID))
	builder.WriteString("experience_id=")
	builder.WriteString(fmt.Sprintf("%v", ej.ExperienceID))
	builder.WriteString(", ")
	builder.WriteString("job_type=")
	builder.WriteString(ej.JobType)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(ej.Status)
	builder.WriteString(", ")
	builder.WriteString("text=")
	builder.WriteString(ej.Text)
	builder.WriteString(", ")
	if v := ej.Error; v != nil {
		builder.WriteString("error=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("attempts=")
	builder.WriteString(fmt.Sprintf("%v", ej.Attempts))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ej.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ej.ProcessedAt; v != nil {
		builder.WriteString("processed_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// EnrichmentJobs is a parsable slice of EnrichmentJob.
type EnrichmentJobs []*EnrichmentJob
