// Code generated by ent, DO NOT EDIT.

package experiencedata

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the experiencedata type in the database.
	Label = "experience_data"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCollectedAt holds the string denoting the collected_at field in the database.
	FieldCollectedAt = "collected_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldSourceType holds the string denoting the source_type field in the database.
	FieldSourceType = "source_type"
	// FieldSourceID holds the string denoting the source_id field in the database.
	FieldSourceID = "source_id"
	// FieldSourceName holds the string denoting the source_name field in the database.
	FieldSourceName = "source_name"
	// FieldFieldID holds the string denoting the field_id field in the database.
	FieldFieldID = "field_id"
	// FieldFieldLabel holds the string denoting the field_label field in the database.
	FieldFieldLabel = "field_label"
	// FieldFieldType holds the string denoting the field_type field in the database.
	FieldFieldType = "field_type"
	// FieldValueText holds the string denoting the value_text field in the database.
	FieldValueText = "value_text"
	// FieldValueNumber holds the string denoting the value_number field in the database.
	FieldValueNumber = "value_number"
	// FieldValueBoolean holds the string denoting the value_boolean field in the database.
	FieldValueBoolean = "value_boolean"
	// FieldValueDate holds the string denoting the value_date field in the database.
	FieldValueDate = "value_date"
	// FieldValueJSON holds the string denoting the value_json field in the database.
	FieldValueJSON = "value_json"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldSentiment holds the string denoting the sentiment field in the database.
	FieldSentiment = "sentiment"
	// FieldSentimentScore holds the string denoting the sentiment_score field in the database.
	FieldSentimentScore = "sentiment_score"
	// FieldEmotion holds the string denoting the emotion field in the database.
	FieldEmotion = "emotion"
	// FieldTopics holds the string denoting the topics field in the database.
	FieldTopics = "topics"
	// FieldUserIdentifier holds the string denoting the user_identifier field in the database.
	FieldUserIdentifier = "user_identifier"
	// FieldEmbedding holds the string denoting the embedding field in the database.
	FieldEmbedding = "embedding"
	// FieldEmbeddingModel holds the string denoting the embedding_model field in the database.
	FieldEmbeddingModel = "embedding_model"
	// Table holds the table name of the experiencedata in the database.
	Table = "experience_data"
)

// Columns holds all SQL columns for experiencedata fields.
var Columns = []string{
	FieldID,
	FieldCollectedAt,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldSourceType,
	FieldSourceID,
	FieldSourceName,
	FieldFieldID,
	FieldFieldLabel,
	FieldFieldType,
	FieldValueText,
	FieldValueNumber,
	FieldValueBoolean,
	FieldValueDate,
	FieldValueJSON,
	FieldMetadata,
	FieldLanguage,
	FieldSentiment,
	FieldSentimentScore,
	FieldEmotion,
	FieldTopics,
	FieldUserIdentifier,
	FieldEmbedding,
	FieldEmbeddingModel,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCollectedAt holds the default value on creation for the "collected_at" field.
	DefaultCollectedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// SourceTypeValidator is a validator for the "source_type" field. It is called by the builders before save.
	SourceTypeValidator func(string) error
	// FieldIDValidator is a validator for the "field_id" field. It is called by the builders before save.
	FieldIDValidator func(string) error
	// FieldTypeValidator is a validator for the "field_type" field. It is called by the builders before save.
	FieldTypeValidator func(string) error
	// LanguageValidator is a validator for the "language" field. It is called by the builders before save.
	LanguageValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ExperienceData queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCollectedAt orders the results by the collected_at field.
func ByCollectedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollectedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// BySourceType orders the results by the source_type field.
func BySourceType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceType, opts...).ToFunc()
}

// BySourceID orders the results by the source_id field.
func BySourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceID, opts...).ToFunc()
}

// BySourceName orders the results by the source_name field.
func BySourceName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceName, opts...).ToFunc()
}

// ByFieldID orders the results by the field_id field.
func ByFieldID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFieldID, opts...).ToFunc()
}

// ByFieldLabel orders the results by the field_label field.
func ByFieldLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFieldLabel, opts...).ToFunc()
}

// ByFieldType orders the results by the field_type field.
func ByFieldType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFieldType, opts...).ToFunc()
}

// ByValueText orders the results by the value_text field.
func ByValueText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValueText, opts...).ToFunc()
}

// ByValueNumber orders the results by the value_number field.
func ByValueNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValueNumber, opts...).ToFunc()
}

// ByValueBoolean orders the results by the value_boolean field.
func ByValueBoolean(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValueBoolean, opts...).ToFunc()
}

// ByValueDate orders the results by the value_date field.
func ByValueDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValueDate, opts...).ToFunc()
}

// ByLanguage orders the results by the language field.
func ByLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguage, opts...).ToFunc()
}

// BySentiment orders the results by the sentiment field.
func BySentiment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSentiment, opts...).ToFunc()
}

// BySentimentScore orders the results by the sentiment_score field.
func BySentimentScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSentimentScore, opts...).ToFunc()
}

// ByEmotion orders the results by the emotion field.
func ByEmotion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmotion, opts...).ToFunc()
}

// ByUserIdentifier orders the results by the user_identifier field.
func ByUserIdentifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserIdentifier, opts...).ToFunc()
}

// ByEmbedding orders the results by the embedding field.
func ByEmbedding(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmbedding, opts...).ToFunc()
}

// ByEmbeddingModel orders the results by the embedding_model field.
func ByEmbeddingModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmbeddingModel, opts...).ToFunc()
}
