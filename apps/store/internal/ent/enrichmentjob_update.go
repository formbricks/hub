// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/formbricks/formbricks-rewrite/apps/store/internal/ent/enrichmentjob"
	"github.com/formbricks/formbricks-rewrite/apps/store/internal/ent/predicate"
)

// EnrichmentJobUpdate is the builder for updating EnrichmentJob entities.
type EnrichmentJobUpdate struct {
	config
	hooks    []Hook
	mutation *EnrichmentJobMutation
}

// Where appends a list predicates to the EnrichmentJobUpdate builder.
func (eju *EnrichmentJobUpdate) Where(ps ...predicate.EnrichmentJob) *EnrichmentJobUpdate {
	eju.mutation.Where(ps...)
	return eju
}

// SetJobType sets the "job_type" field.
func (eju *EnrichmentJobUpdate) SetJobType(s string) *EnrichmentJobUpdate {
	eju.mutation.SetJobType(s)
	return eju
}

// SetNillableJobType sets the "job_type" field if the given value is not nil.
func (eju *EnrichmentJobUpdate) SetNillableJobType(s *string) *EnrichmentJobUpdate {
	if s != nil {
		eju.SetJobType(*s)
	}
	return eju
}

// SetStatus sets the "status" field.
func (eju *EnrichmentJobUpdate) SetStatus(s string) *EnrichmentJobUpdate {
	eju.mutation.SetStatus(s)
	return eju
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (eju *EnrichmentJobUpdate) SetNillableStatus(s *string) *EnrichmentJobUpdate {
	if s != nil {
		eju.SetStatus(*s)
	}
	return eju
}

// SetText sets the "text" field.
func (eju *EnrichmentJobUpdate) SetText(s string) *EnrichmentJobUpdate {
	eju.mutation.SetText(s)
	return eju
}

// SetNillableText sets the "text" field if the given value is not nil.
func (eju *EnrichmentJobUpdate) SetNillableText(s *string) *EnrichmentJobUpdate {
	if s != nil {
		eju.SetText(*s)
	}
	return eju
}

// SetError sets the "error" field.
func (eju *EnrichmentJobUpdate) SetError(s string) *EnrichmentJobUpdate {
	eju.mutation.SetError(s)
	return eju
}

// SetNillableError sets the "error" field if the given value is not nil.
func (eju *EnrichmentJobUpdate) SetNillableError(s *string) *EnrichmentJobUpdate {
	if s != nil {
		eju.SetError(*s)
	}
	return eju
}

// ClearError clears the value of the "error" field.
func (eju *EnrichmentJobUpdate) ClearError() *EnrichmentJobUpdate {
	eju.mutation.ClearError()
	return eju
}

// SetAttempts sets the "attempts" field.
func (eju *EnrichmentJobUpdate) SetAttempts(i int) *EnrichmentJobUpdate {
	eju.mutation.ResetAttempts()
	eju.mutation.SetAttempts(i)
	return eju
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (eju *EnrichmentJobUpdate) SetNillableAttempts(i *int) *EnrichmentJobUpdate {
	if i != nil {
		eju.SetAttempts(*i)
	}
	return eju
}

// AddAttempts adds i to the "attempts" field.
func (eju *EnrichmentJobUpdate) AddAttempts(i int) *EnrichmentJobUpdate {
	eju.mutation.AddAttempts(i)
	return eju
}

// SetProcessedAt sets the "processed_at" field.
func (eju *EnrichmentJobUpdate) SetProcessedAt(t time.Time) *EnrichmentJobUpdate {
	eju.mutation.SetProcessedAt(t)
	return eju
}

// SetNillableProcessedAt sets the "processed_at" field if the given value is not nil.
func (eju *EnrichmentJobUpdate) SetNillableProcessedAt(t *time.Time) *EnrichmentJobUpdate {
	if t != nil {
		eju.SetProcessedAt(*t)
	}
	return eju
}

// ClearProcessedAt clears the value of the "processed_at" field.
func (eju *EnrichmentJobUpdate) ClearProcessedAt() *EnrichmentJobUpdate {
	eju.mutation.ClearProcessedAt()
	return eju
}

// Mutation returns the EnrichmentJobMutation object of the builder.
func (eju *EnrichmentJobUpdate) Mutation() *EnrichmentJobMutation {
	return eju.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eju *EnrichmentJobUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eju.sqlSave, eju.mutation, eju.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eju *EnrichmentJobUpdate) SaveX(ctx context.Context) int {
	affected, err := eju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eju *EnrichmentJobUpdate) Exec(ctx context.Context) error {
	_, err := eju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eju *EnrichmentJobUpdate) ExecX(ctx context.Context) {
	if err := eju.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eju *EnrichmentJobUpdate) check() error {
	if eju.mutation.ExperienceCleared() && len(eju.mutation.ExperienceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EnrichmentJob.experience"`)
	}
	return nil
}

func (eju *EnrichmentJobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eju.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(enrichmentjob.Table, enrichmentjob.Columns, sqlgraph.NewFieldSpec(enrichmentjob.FieldID, field.TypeUUID))
	if ps := eju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eju.mutation.JobType(); ok {
		_spec.SetField(enrichmentjob.FieldJobType, field.TypeString, value)
	}
	if value, ok := eju.mutation.Status(); ok {
		_spec.SetField(enrichmentjob.FieldStatus, field.TypeString, value)
	}
	if value, ok := eju.mutation.Text(); ok {
		_spec.SetField(enrichmentjob.FieldText, field.TypeString, value)
	}
	if value, ok := eju.mutation.Error(); ok {
		_spec.SetField(enrichmentjob.FieldError, field.TypeString, value)
	}
	if eju.mutation.ErrorCleared() {
		_spec.ClearField(enrichmentjob.FieldError, field.TypeString)
	}
	if value, ok := eju.mutation.Attempts(); ok {
		_spec.SetField(enrichmentjob.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := eju.mutation.AddedAttempts(); ok {
		_spec.AddField(enrichmentjob.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := eju.mutation.ProcessedAt(); ok {
		_spec.SetField(enrichmentjob.FieldProcessedAt, field.TypeTime, value)
	}
	if eju.mutation.ProcessedAtCleared() {
		_spec.ClearField(enrichmentjob.FieldProcessedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enrichmentjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eju.mutation.done = true
	return n, nil
}

// EnrichmentJobUpdateOne is the builder for updating a single EnrichmentJob entity.
type EnrichmentJobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EnrichmentJobMutation
}

// SetJobType sets the "job_type" field.
func (ejuo *EnrichmentJobUpdateOne) SetJobType(s string) *EnrichmentJobUpdateOne {
	ejuo.mutation.SetJobType(s)
	return ejuo
}

// SetNillableJobType sets the "job_type" field if the given value is not nil.
func (ejuo *EnrichmentJobUpdateOne) SetNillableJobType(s *string) *EnrichmentJobUpdateOne {
	if s != nil {
		ejuo.SetJobType(*s)
	}
	return ejuo
}

// SetStatus sets the "status" field.
func (ejuo *EnrichmentJobUpdateOne) SetStatus(s string) *EnrichmentJobUpdateOne {
	ejuo.mutation.SetStatus(s)
	return ejuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ejuo *EnrichmentJobUpdateOne) SetNillableStatus(s *string) *EnrichmentJobUpdateOne {
	if s != nil {
		ejuo.SetStatus(*s)
	}
	return ejuo
}

// SetText sets the "text" field.
func (ejuo *EnrichmentJobUpdateOne) SetText(s string) *EnrichmentJobUpdateOne {
	ejuo.mutation.SetText(s)
	return ejuo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (ejuo *EnrichmentJobUpdateOne) SetNillableText(s *string) *EnrichmentJobUpdateOne {
	if s != nil {
		ejuo.SetText(*s)
	}
	return ejuo
}

// SetError sets the "error" field.
func (ejuo *EnrichmentJobUpdateOne) SetError(s string) *EnrichmentJobUpdateOne {
	ejuo.mutation.SetError(s)
	return ejuo
}

// SetNillableError sets the "error" field if the given value is not nil.
func (ejuo *EnrichmentJobUpdateOne) SetNillableError(s *string) *EnrichmentJobUpdateOne {
	if s != nil {
		ejuo.SetError(*s)
	}
	return ejuo
}

// ClearError clears the value of the "error" field.
func (ejuo *EnrichmentJobUpdateOne) ClearError() *EnrichmentJobUpdateOne {
	ejuo.mutation.ClearError()
	return ejuo
}

// SetAttempts sets the "attempts" field.
func (ejuo *EnrichmentJobUpdateOne) SetAttempts(i int) *EnrichmentJobUpdateOne {
	ejuo.mutation.ResetAttempts()
	ejuo.mutation.SetAttempts(i)
	return ejuo
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (ejuo *EnrichmentJobUpdateOne) SetNillableAttempts(i *int) *EnrichmentJobUpdateOne {
	if i != nil {
		ejuo.SetAttempts(*i)
	}
	return ejuo
}

// AddAttempts adds i to the "attempts" field.
func (ejuo *EnrichmentJobUpdateOne) AddAttempts(i int) *EnrichmentJobUpdateOne {
	ejuo.mutation.AddAttempts(i)
	return ejuo
}

// SetProcessedAt sets the "processed_at" field.
func (ejuo *EnrichmentJobUpdateOne) SetProcessedAt(t time.Time) *EnrichmentJobUpdateOne {
	ejuo.mutation.SetProcessedAt(t)
	return ejuo
}

// SetNillableProcessedAt sets the "processed_at" field if the given value is not nil.
func (ejuo *EnrichmentJobUpdateOne) SetNillableProcessedAt(t *time.Time) *EnrichmentJobUpdateOne {
	if t != nil {
		ejuo.SetProcessedAt(*t)
	}
	return ejuo
}

// ClearProcessedAt clears the value of the "processed_at" field.
func (ejuo *EnrichmentJobUpdateOne) ClearProcessedAt() *EnrichmentJobUpdateOne {
	ejuo.mutation.ClearProcessedAt()
	return ejuo
}

// Mutation returns the EnrichmentJobMutation object of the builder.
func (ejuo *EnrichmentJobUpdateOne) Mutation() *EnrichmentJobMutation {
	return ejuo.mutation
}

// Where appends a list predicates to the EnrichmentJobUpdate builder.
func (ejuo *EnrichmentJobUpdateOne) Where(ps ...predicate.EnrichmentJob) *EnrichmentJobUpdateOne {
	ejuo.mutation.Where(ps...)
	return ejuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ejuo *EnrichmentJobUpdateOne) Select(field string, fields ...string) *EnrichmentJobUpdateOne {
	ejuo.fields = append([]string{field}, fields...)
	return ejuo
}

// Save executes the query and returns the updated EnrichmentJob entity.
func (ejuo *EnrichmentJobUpdateOne) Save(ctx context.Context) (*EnrichmentJob, error) {
	return withHooks(ctx, ejuo.sqlSave, ejuo.mutation, ejuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ejuo *EnrichmentJobUpdateOne) SaveX(ctx context.Context) *EnrichmentJob {
	node, err := ejuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ejuo *EnrichmentJobUpdateOne) Exec(ctx context.Context) error {
	_, err := ejuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ejuo *EnrichmentJobUpdateOne) ExecX(ctx context.Context) {
	if err := ejuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ejuo *EnrichmentJobUpdateOne) check() error {
	if ejuo.mutation.ExperienceCleared() && len(ejuo.mutation.ExperienceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EnrichmentJob.experience"`)
	}
	return nil
}

func (ejuo *EnrichmentJobUpdateOne) sqlSave(ctx context.Context) (_node *EnrichmentJob, err error) {
	if err := ejuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(enrichmentjob.Table, enrichmentjob.Columns, sqlgraph.NewFieldSpec(enrichmentjob.FieldID, field.TypeUUID))
	id, ok := ejuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EnrichmentJob.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ejuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enrichmentjob.FieldID)
		for _, f := range fields {
			if !enrichmentjob.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != enrichmentjob.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ejuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ejuo.mutation.JobType(); ok {
		_spec.SetField(enrichmentjob.FieldJobType, field.TypeString, value)
	}
	if value, ok := ejuo.mutation.Status(); ok {
		_spec.SetField(enrichmentjob.FieldStatus, field.TypeString, value)
	}
	if value, ok := ejuo.mutation.Text(); ok {
		_spec.SetField(enrichmentjob.FieldText, field.TypeString, value)
	}
	if value, ok := ejuo.mutation.Error(); ok {
		_spec.SetField(enrichmentjob.FieldError, field.TypeString, value)
	}
	if ejuo.mutation.ErrorCleared() {
		_spec.ClearField(enrichmentjob.FieldError, field.TypeString)
	}
	if value, ok := ejuo.mutation.Attempts(); ok {
		_spec.SetField(enrichmentjob.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := ejuo.mutation.AddedAttempts(); ok {
		_spec.AddField(enrichmentjob.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := ejuo.mutation.ProcessedAt(); ok {
		_spec.SetField(enrichmentjob.FieldProcessedAt, field.TypeTime, value)
	}
	if ejuo.mutation.ProcessedAtCleared() {
		_spec.ClearField(enrichmentjob.FieldProcessedAt, field.TypeTime)
	}
	_node = &EnrichmentJob{config: ejuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ejuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enrichmentjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ejuo.mutation.done = true
	return _node, nil
}
