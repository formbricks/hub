// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/formbricks/formbricks-rewrite/apps/store/internal/ent/enrichmentjob"
	"github.com/formbricks/formbricks-rewrite/apps/store/internal/ent/experiencedata"
	"github.com/google/uuid"
)

// EnrichmentJobCreate is the builder for creating a EnrichmentJob entity.
type EnrichmentJobCreate struct {
	config
	mutation *EnrichmentJobMutation
	hooks    []Hook
}

// SetExperienceID sets the "experience_id" field.
func (ejc *EnrichmentJobCreate) SetExperienceID(u uuid.UUID) *EnrichmentJobCreate {
	ejc.mutation.SetExperienceID(u)
	return ejc
}

// SetJobType sets the "job_type" field.
func (ejc *EnrichmentJobCreate) SetJobType(s string) *EnrichmentJobCreate {
	ejc.mutation.SetJobType(s)
	return ejc
}

// SetNillableJobType sets the "job_type" field if the given value is not nil.
func (ejc *EnrichmentJobCreate) SetNillableJobType(s *string) *EnrichmentJobCreate {
	if s != nil {
		ejc.SetJobType(*s)
	}
	return ejc
}

// SetStatus sets the "status" field.
func (ejc *EnrichmentJobCreate) SetStatus(s string) *EnrichmentJobCreate {
	ejc.mutation.SetStatus(s)
	return ejc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ejc *EnrichmentJobCreate) SetNillableStatus(s *string) *EnrichmentJobCreate {
	if s != nil {
		ejc.SetStatus(*s)
	}
	return ejc
}

// SetText sets the "text" field.
func (ejc *EnrichmentJobCreate) SetText(s string) *EnrichmentJobCreate {
	ejc.mutation.SetText(s)
	return ejc
}

// SetError sets the "error" field.
func (ejc *EnrichmentJobCreate) SetError(s string) *EnrichmentJobCreate {
	ejc.mutation.SetError(s)
	return ejc
}

// SetNillableError sets the "error" field if the given value is not nil.
func (ejc *EnrichmentJobCreate) SetNillableError(s *string) *EnrichmentJobCreate {
	if s != nil {
		ejc.SetError(*s)
	}
	return ejc
}

// SetAttempts sets the "attempts" field.
func (ejc *EnrichmentJobCreate) SetAttempts(i int) *EnrichmentJobCreate {
	ejc.mutation.SetAttempts(i)
	return ejc
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (ejc *EnrichmentJobCreate) SetNillableAttempts(i *int) *EnrichmentJobCreate {
	if i != nil {
		ejc.SetAttempts(*i)
	}
	return ejc
}

// SetCreatedAt sets the "created_at" field.
func (ejc *EnrichmentJobCreate) SetCreatedAt(t time.Time) *EnrichmentJobCreate {
	ejc.mutation.SetCreatedAt(t)
	return ejc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ejc *EnrichmentJobCreate) SetNillableCreatedAt(t *time.Time) *EnrichmentJobCreate {
	if t != nil {
		ejc.SetCreatedAt(*t)
	}
	return ejc
}

// SetProcessedAt sets the "processed_at" field.
func (ejc *EnrichmentJobCreate) SetProcessedAt(t time.Time) *EnrichmentJobCreate {
	ejc.mutation.SetProcessedAt(t)
	return ejc
}

// SetNillableProcessedAt sets the "processed_at" field if the given value is not nil.
func (ejc *EnrichmentJobCreate) SetNillableProcessedAt(t *time.Time) *EnrichmentJobCreate {
	if t != nil {
		ejc.SetProcessedAt(*t)
	}
	return ejc
}

// SetID sets the "id" field.
func (ejc *EnrichmentJobCreate) SetID(u uuid.UUID) *EnrichmentJobCreate {
	ejc.mutation.SetID(u)
	return ejc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ejc *EnrichmentJobCreate) SetNillableID(u *uuid.UUID) *EnrichmentJobCreate {
	if u != nil {
		ejc.SetID(*u)
	}
	return ejc
}

// SetExperience sets the "experience" edge to the ExperienceData entity.
func (ejc *EnrichmentJobCreate) SetExperience(e *ExperienceData) *EnrichmentJobCreate {
	return ejc.SetExperienceID(e.ID)
}

// Mutation returns the EnrichmentJobMutation object of the builder.
func (ejc *EnrichmentJobCreate) Mutation() *EnrichmentJobMutation {
	return ejc.mutation
}

// Save creates the EnrichmentJob in the database.
func (ejc *EnrichmentJobCreate) Save(ctx context.Context) (*EnrichmentJob, error) {
	ejc.defaults()
	return withHooks(ctx, ejc.sqlSave, ejc.mutation, ejc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ejc *EnrichmentJobCreate) SaveX(ctx context.Context) *EnrichmentJob {
	v, err := ejc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ejc *EnrichmentJobCreate) Exec(ctx context.Context) error {
	_, err := ejc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ejc *EnrichmentJobCreate) ExecX(ctx context.Context) {
	if err := ejc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ejc *EnrichmentJobCreate) defaults() {
	if _, ok := ejc.mutation.JobType(); !ok {
		v := enrichmentjob.DefaultJobType
		ejc.mutation.SetJobType(v)
	}
	if _, ok := ejc.mutation.Status(); !ok {
		v := enrichmentjob.DefaultStatus
		ejc.mutation.SetStatus(v)
	}
	if _, ok := ejc.mutation.Attempts(); !ok {
		v := enrichmentjob.DefaultAttempts
		ejc.mutation.SetAttempts(v)
	}
	if _, ok := ejc.mutation.CreatedAt(); !ok {
		v := enrichmentjob.DefaultCreatedAt()
		ejc.mutation.SetCreatedAt(v)
	}
	if _, ok := ejc.mutation.ID(); !ok {
		v := enrichmentjob.DefaultID()
		ejc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ejc *EnrichmentJobCreate) check() error {
	if _, ok := ejc.mutation.ExperienceID(); !ok {
		return &ValidationError{Name: "experience_id", err: errors.New(`ent: missing required field "EnrichmentJob.experience_id"`)}
	}
	if _, ok := ejc.mutation.JobType(); !ok {
		return &ValidationError{Name: "job_type", err: errors.New(`ent: missing required field "EnrichmentJob.job_type"`)}
	}
	if _, ok := ejc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "EnrichmentJob.status"`)}
	}
	if _, ok := ejc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "EnrichmentJob.text"`)}
	}
	if _, ok := ejc.mutation.Attempts(); !ok {
		return &ValidationError{Name: "attempts", err: errors.New(`ent: missing required field "EnrichmentJob.attempts"`)}
	}
	if _, ok := ejc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EnrichmentJob.created_at"`)}
	}
	if len(ejc.mutation.ExperienceIDs()) == 0 {
		return &ValidationError{Name: "experience", err: errors.New(`ent: missing required edge "EnrichmentJob.experience"`)}
	}
	return nil
}

func (ejc *EnrichmentJobCreate) sqlSave(ctx context.Context) (*EnrichmentJob, error) {
	if err := ejc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ejc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ejc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ejc.mutation.id = &_node.ID
	ejc.mutation.done = true
	return _node, nil
}

func (ejc *EnrichmentJobCreate) createSpec() (*EnrichmentJob, *sqlgraph.CreateSpec) {
	var (
		_node = &EnrichmentJob{config: ejc.config}
		_spec = sqlgraph.NewCreateSpec(enrichmentjob.Table, sqlgraph.NewFieldSpec(enrichmentjob.FieldID, field.TypeUUID))
	)
	if id, ok := ejc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ejc.mutation.JobType(); ok {
		_spec.SetField(enrichmentjob.FieldJobType, field.TypeString, value)
		_node.JobType = value
	}
	if value, ok := ejc.mutation.Status(); ok {
		_spec.SetField(enrichmentjob.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ejc.mutation.Text(); ok {
		_spec.SetField(enrichmentjob.FieldText, field.TypeString, value)
		_node.Text = value
	}
	if value, ok := ejc.mutation.Error(); ok {
		_spec.SetField(enrichmentjob.FieldError, field.TypeString, value)
		_node.Error = &value
	}
	if value, ok := ejc.mutation.Attempts(); ok {
		_spec.SetField(enrichmentjob.FieldAttempts, field.TypeInt, value)
		_node.Attempts = value
	}
	if value, ok := ejc.mutation.CreatedAt(); ok {
		_spec.SetField(enrichmentjob.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ejc.mutation.ProcessedAt(); ok {
		_spec.SetField(enrichmentjob.FieldProcessedAt, field.TypeTime, value)
		_node.ProcessedAt = &value
	}
	if nodes := ejc.mutation.ExperienceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enrichmentjob.ExperienceTable,
			Columns: []string{enrichmentjob.ExperienceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(experiencedata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ExperienceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EnrichmentJobCreateBulk is the builder for creating many EnrichmentJob entities in bulk.
type EnrichmentJobCreateBulk struct {
	config
	err      error
	builders []*EnrichmentJobCreate
}

// Save creates the EnrichmentJob entities in the database.
func (ejcb *EnrichmentJobCreateBulk) Save(ctx context.Context) ([]*EnrichmentJob, error) {
	if ejcb.err != nil {
		return nil, ejcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ejcb.builders))
	nodes := make([]*EnrichmentJob, len(ejcb.builders))
	mutators := make([]Mutator, len(ejcb.builders))
	for i := range ejcb.builders {
		func(i int, root context.Context) {
			builder := ejcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EnrichmentJobMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ejcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ejcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ejcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ejcb *EnrichmentJobCreateBulk) SaveX(ctx context.Context) []*EnrichmentJob {
	v, err := ejcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ejcb *EnrichmentJobCreateBulk) Exec(ctx context.Context) error {
	_, err := ejcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ejcb *EnrichmentJobCreateBulk) ExecX(ctx context.Context) {
	if err := ejcb.Exec(ctx); err != nil {
		panic(err)
	}
}
