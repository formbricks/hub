{
  "components": {
    "schemas": {
      "CreateExperienceInputBody": {
        "additionalProperties": false,
        "properties": {
          "$schema": {
            "description": "A URL to the JSON Schema for this object.",
            "examples": [
              "http://localhost:8080/schemas/CreateExperienceInputBody.json"
            ],
            "format": "uri",
            "readOnly": true,
            "type": "string"
          },
          "collected_at": {
            "description": "When the feedback was collected (defaults to now)",
            "format": "date-time",
            "type": "string"
          },
          "field_id": {
            "description": "Identifier for the question/field",
            "examples": [
              "q1"
            ],
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "field_label": {
            "description": "The actual question text",
            "examples": [
              "How satisfied are you?"
            ],
            "type": "string"
          },
          "field_type": {
            "description": "Field type: text (enrichable), categorical, nps, csat, rating, number, boolean, date",
            "enum": [
              "text",
              "categorical",
              "nps",
              "csat",
              "rating",
              "number",
              "boolean",
              "date"
            ],
            "examples": [
              "rating"
            ],
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "language": {
            "description": "ISO language code",
            "examples": [
              "en"
            ],
            "maxLength": 10,
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {},
            "description": "User agent, device, location, referrer, tags, etc.",
            "type": "object"
          },
          "source_id": {
            "description": "Reference to survey/form/ticket ID",
            "examples": [
              "survey-123"
            ],
            "type": "string"
          },
          "source_name": {
            "description": "Human-readable name",
            "examples": [
              "Q1 NPS Survey"
            ],
            "type": "string"
          },
          "source_type": {
            "description": "Type of feedback source (e.g., survey, review, feedback_form)",
            "examples": [
              "survey"
            ],
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "user_identifier": {
            "description": "Anonymous ID or email hash",
            "examples": [
              "user-abc-123"
            ],
            "type": "string"
          },
          "value_boolean": {
            "description": "For yes/no questions",
            "examples": [
              true
            ],
            "type": "boolean"
          },
          "value_date": {
            "description": "For date responses",
            "format": "date-time",
            "type": "string"
          },
          "value_json": {
            "additionalProperties": {},
            "description": "For complex responses like multiple choice arrays",
            "type": "object"
          },
          "value_number": {
            "description": "For ratings, NPS scores, numeric responses",
            "examples": [
              9
            ],
            "format": "double",
            "type": "number"
          },
          "value_text": {
            "description": "For open-ended text responses",
            "examples": [
              "Great service!"
            ],
            "type": "string"
          }
        },
        "required": [
          "source_type",
          "field_id",
          "field_type"
        ],
        "type": "object"
      },
      "ErrorDetail": {
        "additionalProperties": false,
        "properties": {
          "location": {
            "description": "Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'",
            "type": "string"
          },
          "message": {
            "description": "Error message text",
            "type": "string"
          },
          "value": {
            "description": "The value at the given location"
          }
        },
        "type": "object"
      },
      "ErrorModel": {
        "additionalProperties": false,
        "properties": {
          "$schema": {
            "description": "A URL to the JSON Schema for this object.",
            "examples": [
              "http://localhost:8080/schemas/ErrorModel.json"
            ],
            "format": "uri",
            "readOnly": true,
            "type": "string"
          },
          "detail": {
            "description": "A human-readable explanation specific to this occurrence of the problem.",
            "examples": [
              "Property foo is required but is missing."
            ],
            "type": "string"
          },
          "errors": {
            "description": "Optional list of individual error details",
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "instance": {
            "description": "A URI reference that identifies the specific occurrence of the problem.",
            "examples": [
              "https://example.com/error-log/abc123"
            ],
            "format": "uri",
            "type": "string"
          },
          "status": {
            "description": "HTTP status code",
            "examples": [
              400
            ],
            "format": "int64",
            "type": "integer"
          },
          "title": {
            "description": "A short, human-readable summary of the problem type. This value should not change between occurrences of the error.",
            "examples": [
              "Bad Request"
            ],
            "type": "string"
          },
          "type": {
            "default": "about:blank",
            "description": "A URI reference to human-readable documentation for the error.",
            "examples": [
              "https://example.com/errors/example"
            ],
            "format": "uri",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExperienceData": {
        "additionalProperties": false,
        "properties": {
          "$schema": {
            "description": "A URL to the JSON Schema for this object.",
            "examples": [
              "http://localhost:8080/schemas/ExperienceData.json"
            ],
            "format": "uri",
            "readOnly": true,
            "type": "string"
          },
          "collected_at": {
            "description": "When the feedback was collected",
            "format": "date-time",
            "type": "string"
          },
          "created_at": {
            "description": "When this record was created",
            "format": "date-time",
            "type": "string"
          },
          "emotion": {
            "description": "AI-detected emotion: joy, anger, frustration, sadness, neutral",
            "type": "string"
          },
          "field_id": {
            "description": "Identifier for the question/field",
            "type": "string"
          },
          "field_label": {
            "description": "The actual question text",
            "type": "string"
          },
          "field_type": {
            "description": "Type of field",
            "type": "string"
          },
          "id": {
            "description": "UUIDv7 primary key",
            "type": "string"
          },
          "language": {
            "description": "ISO language code",
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {},
            "description": "Additional context",
            "type": "object"
          },
          "sentiment": {
            "description": "AI-detected sentiment: positive, negative, neutral",
            "type": "string"
          },
          "sentiment_score": {
            "description": "Sentiment intensity from -1 (negative) to +1 (positive)",
            "format": "double",
            "type": "number"
          },
          "source_id": {
            "description": "Reference to survey/form/ticket ID",
            "type": "string"
          },
          "source_name": {
            "description": "Human-readable name",
            "type": "string"
          },
          "source_type": {
            "description": "Type of feedback source",
            "type": "string"
          },
          "topics": {
            "description": "Key topics extracted by AI",
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "updated_at": {
            "description": "When this record was last updated",
            "format": "date-time",
            "type": "string"
          },
          "user_identifier": {
            "description": "User identifier",
            "type": "string"
          },
          "value_boolean": {
            "description": "Boolean response",
            "type": "boolean"
          },
          "value_date": {
            "description": "Date response",
            "format": "date-time",
            "type": "string"
          },
          "value_json": {
            "additionalProperties": {},
            "description": "Complex response",
            "type": "object"
          },
          "value_number": {
            "description": "Numeric response",
            "format": "double",
            "type": "number"
          },
          "value_text": {
            "description": "Text response",
            "type": "string"
          }
        },
        "required": [
          "id",
          "collected_at",
          "created_at",
          "updated_at",
          "source_type",
          "field_id",
          "field_type"
        ],
        "type": "object"
      },
      "ListExperiencesOutputBody": {
        "additionalProperties": false,
        "properties": {
          "$schema": {
            "description": "A URL to the JSON Schema for this object.",
            "examples": [
              "http://localhost:8080/schemas/ListExperiencesOutputBody.json"
            ],
            "format": "uri",
            "readOnly": true,
            "type": "string"
          },
          "data": {
            "description": "List of experiences",
            "items": {
              "$ref": "#/components/schemas/ExperienceData"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "limit": {
            "description": "Limit used in query",
            "format": "int64",
            "type": "integer"
          },
          "offset": {
            "description": "Offset used in query",
            "format": "int64",
            "type": "integer"
          },
          "total": {
            "description": "Total count of experiences matching filters",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "data",
          "total",
          "limit",
          "offset"
        ],
        "type": "object"
      },
      "SearchOutputBody": {
        "additionalProperties": false,
        "properties": {
          "$schema": {
            "description": "A URL to the JSON Schema for this object.",
            "examples": [
              "http://localhost:8080/schemas/SearchOutputBody.json"
            ],
            "format": "uri",
            "readOnly": true,
            "type": "string"
          },
          "count": {
            "description": "Number of results returned",
            "format": "int64",
            "type": "integer"
          },
          "query": {
            "description": "The search query that was executed",
            "type": "string"
          },
          "results": {
            "description": "Search results ordered by relevance",
            "items": {
              "$ref": "#/components/schemas/SearchResultItem"
            },
            "type": [
              "array",
              "null"
            ]
          }
        },
        "required": [
          "results",
          "query",
          "count"
        ],
        "type": "object"
      },
      "SearchResultItem": {
        "additionalProperties": false,
        "properties": {
          "collected_at": {
            "description": "When the feedback was collected",
            "format": "date-time",
            "type": "string"
          },
          "created_at": {
            "description": "When this record was created",
            "format": "date-time",
            "type": "string"
          },
          "emotion": {
            "description": "AI-detected emotion: joy, anger, frustration, sadness, neutral",
            "type": "string"
          },
          "field_id": {
            "description": "Identifier for the question/field",
            "type": "string"
          },
          "field_label": {
            "description": "The actual question text",
            "type": "string"
          },
          "field_type": {
            "description": "Type of field",
            "type": "string"
          },
          "id": {
            "description": "UUIDv7 primary key",
            "type": "string"
          },
          "language": {
            "description": "ISO language code",
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {},
            "description": "Additional context",
            "type": "object"
          },
          "sentiment": {
            "description": "AI-detected sentiment: positive, negative, neutral",
            "type": "string"
          },
          "sentiment_score": {
            "description": "Sentiment intensity from -1 (negative) to +1 (positive)",
            "format": "double",
            "type": "number"
          },
          "similarity_score": {
            "description": "Cosine similarity score (0-1, higher is more similar)",
            "format": "double",
            "type": "number"
          },
          "source_id": {
            "description": "Reference to survey/form/ticket ID",
            "type": "string"
          },
          "source_name": {
            "description": "Human-readable name",
            "type": "string"
          },
          "source_type": {
            "description": "Type of feedback source",
            "type": "string"
          },
          "topics": {
            "description": "Key topics extracted by AI",
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "updated_at": {
            "description": "When this record was last updated",
            "format": "date-time",
            "type": "string"
          },
          "user_identifier": {
            "description": "User identifier",
            "type": "string"
          },
          "value_boolean": {
            "description": "Boolean response",
            "type": "boolean"
          },
          "value_date": {
            "description": "Date response",
            "format": "date-time",
            "type": "string"
          },
          "value_json": {
            "additionalProperties": {},
            "description": "Complex response",
            "type": "object"
          },
          "value_number": {
            "description": "Numeric response",
            "format": "double",
            "type": "number"
          },
          "value_text": {
            "description": "Text response",
            "type": "string"
          }
        },
        "required": [
          "similarity_score",
          "id",
          "collected_at",
          "created_at",
          "updated_at",
          "source_type",
          "field_id",
          "field_type"
        ],
        "type": "object"
      },
      "UpdateExperienceInputBody": {
        "additionalProperties": false,
        "properties": {
          "$schema": {
            "description": "A URL to the JSON Schema for this object.",
            "examples": [
              "http://localhost:8080/schemas/UpdateExperienceInputBody.json"
            ],
            "format": "uri",
            "readOnly": true,
            "type": "string"
          },
          "language": {
            "description": "Update language",
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {},
            "description": "Update metadata",
            "type": "object"
          },
          "user_identifier": {
            "description": "Update user identifier",
            "type": "string"
          },
          "value_boolean": {
            "description": "Update boolean response",
            "type": "boolean"
          },
          "value_date": {
            "description": "Update date response",
            "format": "date-time",
            "type": "string"
          },
          "value_json": {
            "additionalProperties": {},
            "description": "Update complex response",
            "type": "object"
          },
          "value_number": {
            "description": "Update numeric response",
            "format": "double",
            "type": "number"
          },
          "value_text": {
            "description": "Update text response",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "info": {
    "contact": {
      "email": "support@formbricks.com",
      "name": "Formbricks Team",
      "url": "https://formbricks.com"
    },
    "description": "Experience data storage service for the Formbricks ecosystem.\n\n📚 Full Documentation: https://hub.formbricks.com\n🚀 Quick Start: https://hub.formbricks.com/quickstart\n🔌 Connector Ecosystem: Coming soon",
    "license": {
      "name": "Apache-2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    },
    "title": "Formbricks Hub API",
    "version": "1.0.0"
  },
  "openapi": "3.1.0",
  "paths": {
    "/v1/experiences": {
      "get": {
        "description": "Lists experiences with optional filters and pagination",
        "operationId": "list-experiences",
        "parameters": [
          {
            "description": "Filter by source type",
            "explode": false,
            "in": "query",
            "name": "source_type",
            "schema": {
              "description": "Filter by source type",
              "type": "string"
            }
          },
          {
            "description": "Filter by source ID",
            "explode": false,
            "in": "query",
            "name": "source_id",
            "schema": {
              "description": "Filter by source ID",
              "type": "string"
            }
          },
          {
            "description": "Filter by field type",
            "explode": false,
            "in": "query",
            "name": "field_type",
            "schema": {
              "description": "Filter by field type",
              "type": "string"
            }
          },
          {
            "description": "Filter by user identifier",
            "explode": false,
            "in": "query",
            "name": "user_identifier",
            "schema": {
              "description": "Filter by user identifier",
              "type": "string"
            }
          },
          {
            "description": "Filter by collected_at \u003e= since (ISO 8601 format)",
            "explode": false,
            "in": "query",
            "name": "since",
            "schema": {
              "description": "Filter by collected_at \u003e= since (ISO 8601 format)",
              "type": "string"
            }
          },
          {
            "description": "Filter by collected_at \u003c= until (ISO 8601 format)",
            "explode": false,
            "in": "query",
            "name": "until",
            "schema": {
              "description": "Filter by collected_at \u003c= until (ISO 8601 format)",
              "type": "string"
            }
          },
          {
            "description": "Number of results to return (max 1000)",
            "explode": false,
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "description": "Number of results to return (max 1000)",
              "format": "int64",
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Number of results to skip",
            "explode": false,
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "description": "Number of results to skip",
              "format": "int64",
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListExperiencesOutputBody"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "List experiences with filters",
        "tags": [
          "Experiences"
        ]
      },
      "post": {
        "description": "Creates a new experience data record",
        "operationId": "create-experience",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateExperienceInputBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExperienceData"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Create a new experience data record",
        "tags": [
          "Experiences"
        ]
      }
    },
    "/v1/experiences/search": {
      "get": {
        "description": "Performs vector similarity search on experience data using OpenAI embeddings. Only returns text experiences that have been embedded.",
        "operationId": "search-experiences",
        "parameters": [
          {
            "description": "Natural language search query",
            "example": "pricing feedback",
            "explode": false,
            "in": "query",
            "name": "query",
            "required": true,
            "schema": {
              "description": "Natural language search query",
              "examples": [
                "pricing feedback"
              ],
              "maxLength": 1000,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "description": "Maximum number of results to return",
            "explode": false,
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "description": "Maximum number of results to return",
              "format": "int64",
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Filter by source type (e.g., survey, review)",
            "example": "survey",
            "explode": false,
            "in": "query",
            "name": "source_type",
            "schema": {
              "description": "Filter by source type (e.g., survey, review)",
              "examples": [
                "survey"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter by collection date (ISO 8601)",
            "example": "2024-01-01T00:00:00Z",
            "explode": false,
            "in": "query",
            "name": "since",
            "schema": {
              "description": "Filter by collection date (ISO 8601)",
              "examples": [
                "2024-01-01T00:00:00Z"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filter by collection date (ISO 8601)",
            "example": "2024-12-31T23:59:59Z",
            "explode": false,
            "in": "query",
            "name": "until",
            "schema": {
              "description": "Filter by collection date (ISO 8601)",
              "examples": [
                "2024-12-31T23:59:59Z"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchOutputBody"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Search experiences using semantic search",
        "tags": [
          "Experiences"
        ]
      }
    },
    "/v1/experiences/{id}": {
      "delete": {
        "description": "Permanently deletes an experience data record",
        "operationId": "delete-experience",
        "parameters": [
          {
            "description": "Experience ID (UUID)",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "Experience ID (UUID)",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "default": {
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Delete an experience",
        "tags": [
          "Experiences"
        ]
      },
      "get": {
        "description": "Retrieves a single experience data record by its UUID",
        "operationId": "get-experience",
        "parameters": [
          {
            "description": "Experience ID (UUID)",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "Experience ID (UUID)",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExperienceData"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Get an experience by ID",
        "tags": [
          "Experiences"
        ]
      },
      "patch": {
        "description": "Updates specific fields of an experience data record",
        "operationId": "update-experience",
        "parameters": [
          {
            "description": "Experience ID (UUID)",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "Experience ID (UUID)",
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExperienceInputBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExperienceData"
                }
              }
            },
            "description": "OK"
          },
          "default": {
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Error"
          }
        },
        "summary": "Update an experience",
        "tags": [
          "Experiences"
        ]
      }
    }
  },
  "servers": [
    {
      "description": "Development server",
      "url": "http://localhost:8080"
    }
  ]
}