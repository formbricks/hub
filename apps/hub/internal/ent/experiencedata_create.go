// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/formbricks/hub/apps/hub/internal/ent/experiencedata"
	"github.com/google/uuid"
	pgvector "github.com/pgvector/pgvector-go"
)

// ExperienceDataCreate is the builder for creating a ExperienceData entity.
type ExperienceDataCreate struct {
	config
	mutation *ExperienceDataMutation
	hooks    []Hook
}

// SetCollectedAt sets the "collected_at" field.
func (edc *ExperienceDataCreate) SetCollectedAt(t time.Time) *ExperienceDataCreate {
	edc.mutation.SetCollectedAt(t)
	return edc
}

// SetNillableCollectedAt sets the "collected_at" field if the given value is not nil.
func (edc *ExperienceDataCreate) SetNillableCollectedAt(t *time.Time) *ExperienceDataCreate {
	if t != nil {
		edc.SetCollectedAt(*t)
	}
	return edc
}

// SetCreatedAt sets the "created_at" field.
func (edc *ExperienceDataCreate) SetCreatedAt(t time.Time) *ExperienceDataCreate {
	edc.mutation.SetCreatedAt(t)
	return edc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (edc *ExperienceDataCreate) SetNillableCreatedAt(t *time.Time) *ExperienceDataCreate {
	if t != nil {
		edc.SetCreatedAt(*t)
	}
	return edc
}

// SetUpdatedAt sets the "updated_at" field.
func (edc *ExperienceDataCreate) SetUpdatedAt(t time.Time) *ExperienceDataCreate {
	edc.mutation.SetUpdatedAt(t)
	return edc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (edc *ExperienceDataCreate) SetNillableUpdatedAt(t *time.Time) *ExperienceDataCreate {
	if t != nil {
		edc.SetUpdatedAt(*t)
	}
	return edc
}

// SetSourceType sets the "source_type" field.
func (edc *ExperienceDataCreate) SetSourceType(s string) *ExperienceDataCreate {
	edc.mutation.SetSourceType(s)
	return edc
}

// SetSourceID sets the "source_id" field.
func (edc *ExperienceDataCreate) SetSourceID(s string) *ExperienceDataCreate {
	edc.mutation.SetSourceID(s)
	return edc
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (edc *ExperienceDataCreate) SetNillableSourceID(s *string) *ExperienceDataCreate {
	if s != nil {
		edc.SetSourceID(*s)
	}
	return edc
}

// SetSourceName sets the "source_name" field.
func (edc *ExperienceDataCreate) SetSourceName(s string) *ExperienceDataCreate {
	edc.mutation.SetSourceName(s)
	return edc
}

// SetNillableSourceName sets the "source_name" field if the given value is not nil.
func (edc *ExperienceDataCreate) SetNillableSourceName(s *string) *ExperienceDataCreate {
	if s != nil {
		edc.SetSourceName(*s)
	}
	return edc
}

// SetFieldID sets the "field_id" field.
func (edc *ExperienceDataCreate) SetFieldID(s string) *ExperienceDataCreate {
	edc.mutation.SetFieldID(s)
	return edc
}

// SetFieldLabel sets the "field_label" field.
func (edc *ExperienceDataCreate) SetFieldLabel(s string) *ExperienceDataCreate {
	edc.mutation.SetFieldLabel(s)
	return edc
}

// SetNillableFieldLabel sets the "field_label" field if the given value is not nil.
func (edc *ExperienceDataCreate) SetNillableFieldLabel(s *string) *ExperienceDataCreate {
	if s != nil {
		edc.SetFieldLabel(*s)
	}
	return edc
}

// SetFieldType sets the "field_type" field.
func (edc *ExperienceDataCreate) SetFieldType(s string) *ExperienceDataCreate {
	edc.mutation.SetFieldType(s)
	return edc
}

// SetValueText sets the "value_text" field.
func (edc *ExperienceDataCreate) SetValueText(s string) *ExperienceDataCreate {
	edc.mutation.SetValueText(s)
	return edc
}

// SetNillableValueText sets the "value_text" field if the given value is not nil.
func (edc *ExperienceDataCreate) SetNillableValueText(s *string) *ExperienceDataCreate {
	if s != nil {
		edc.SetValueText(*s)
	}
	return edc
}

// SetValueNumber sets the "value_number" field.
func (edc *ExperienceDataCreate) SetValueNumber(f float64) *ExperienceDataCreate {
	edc.mutation.SetValueNumber(f)
	return edc
}

// SetNillableValueNumber sets the "value_number" field if the given value is not nil.
func (edc *ExperienceDataCreate) SetNillableValueNumber(f *float64) *ExperienceDataCreate {
	if f != nil {
		edc.SetValueNumber(*f)
	}
	return edc
}

// SetValueBoolean sets the "value_boolean" field.
func (edc *ExperienceDataCreate) SetValueBoolean(b bool) *ExperienceDataCreate {
	edc.mutation.SetValueBoolean(b)
	return edc
}

// SetNillableValueBoolean sets the "value_boolean" field if the given value is not nil.
func (edc *ExperienceDataCreate) SetNillableValueBoolean(b *bool) *ExperienceDataCreate {
	if b != nil {
		edc.SetValueBoolean(*b)
	}
	return edc
}

// SetValueDate sets the "value_date" field.
func (edc *ExperienceDataCreate) SetValueDate(t time.Time) *ExperienceDataCreate {
	edc.mutation.SetValueDate(t)
	return edc
}

// SetNillableValueDate sets the "value_date" field if the given value is not nil.
func (edc *ExperienceDataCreate) SetNillableValueDate(t *time.Time) *ExperienceDataCreate {
	if t != nil {
		edc.SetValueDate(*t)
	}
	return edc
}

// SetValueJSON sets the "value_json" field.
func (edc *ExperienceDataCreate) SetValueJSON(m map[string]interface{}) *ExperienceDataCreate {
	edc.mutation.SetValueJSON(m)
	return edc
}

// SetMetadata sets the "metadata" field.
func (edc *ExperienceDataCreate) SetMetadata(m map[string]interface{}) *ExperienceDataCreate {
	edc.mutation.SetMetadata(m)
	return edc
}

// SetLanguage sets the "language" field.
func (edc *ExperienceDataCreate) SetLanguage(s string) *ExperienceDataCreate {
	edc.mutation.SetLanguage(s)
	return edc
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (edc *ExperienceDataCreate) SetNillableLanguage(s *string) *ExperienceDataCreate {
	if s != nil {
		edc.SetLanguage(*s)
	}
	return edc
}

// SetSentiment sets the "sentiment" field.
func (edc *ExperienceDataCreate) SetSentiment(s string) *ExperienceDataCreate {
	edc.mutation.SetSentiment(s)
	return edc
}

// SetNillableSentiment sets the "sentiment" field if the given value is not nil.
func (edc *ExperienceDataCreate) SetNillableSentiment(s *string) *ExperienceDataCreate {
	if s != nil {
		edc.SetSentiment(*s)
	}
	return edc
}

// SetSentimentScore sets the "sentiment_score" field.
func (edc *ExperienceDataCreate) SetSentimentScore(f float64) *ExperienceDataCreate {
	edc.mutation.SetSentimentScore(f)
	return edc
}

// SetNillableSentimentScore sets the "sentiment_score" field if the given value is not nil.
func (edc *ExperienceDataCreate) SetNillableSentimentScore(f *float64) *ExperienceDataCreate {
	if f != nil {
		edc.SetSentimentScore(*f)
	}
	return edc
}

// SetEmotion sets the "emotion" field.
func (edc *ExperienceDataCreate) SetEmotion(s string) *ExperienceDataCreate {
	edc.mutation.SetEmotion(s)
	return edc
}

// SetNillableEmotion sets the "emotion" field if the given value is not nil.
func (edc *ExperienceDataCreate) SetNillableEmotion(s *string) *ExperienceDataCreate {
	if s != nil {
		edc.SetEmotion(*s)
	}
	return edc
}

// SetTopics sets the "topics" field.
func (edc *ExperienceDataCreate) SetTopics(s []string) *ExperienceDataCreate {
	edc.mutation.SetTopics(s)
	return edc
}

// SetUserIdentifier sets the "user_identifier" field.
func (edc *ExperienceDataCreate) SetUserIdentifier(s string) *ExperienceDataCreate {
	edc.mutation.SetUserIdentifier(s)
	return edc
}

// SetNillableUserIdentifier sets the "user_identifier" field if the given value is not nil.
func (edc *ExperienceDataCreate) SetNillableUserIdentifier(s *string) *ExperienceDataCreate {
	if s != nil {
		edc.SetUserIdentifier(*s)
	}
	return edc
}

// SetEmbedding sets the "embedding" field.
func (edc *ExperienceDataCreate) SetEmbedding(pg pgvector.Vector) *ExperienceDataCreate {
	edc.mutation.SetEmbedding(pg)
	return edc
}

// SetNillableEmbedding sets the "embedding" field if the given value is not nil.
func (edc *ExperienceDataCreate) SetNillableEmbedding(pg *pgvector.Vector) *ExperienceDataCreate {
	if pg != nil {
		edc.SetEmbedding(*pg)
	}
	return edc
}

// SetEmbeddingModel sets the "embedding_model" field.
func (edc *ExperienceDataCreate) SetEmbeddingModel(s string) *ExperienceDataCreate {
	edc.mutation.SetEmbeddingModel(s)
	return edc
}

// SetNillableEmbeddingModel sets the "embedding_model" field if the given value is not nil.
func (edc *ExperienceDataCreate) SetNillableEmbeddingModel(s *string) *ExperienceDataCreate {
	if s != nil {
		edc.SetEmbeddingModel(*s)
	}
	return edc
}

// SetID sets the "id" field.
func (edc *ExperienceDataCreate) SetID(u uuid.UUID) *ExperienceDataCreate {
	edc.mutation.SetID(u)
	return edc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (edc *ExperienceDataCreate) SetNillableID(u *uuid.UUID) *ExperienceDataCreate {
	if u != nil {
		edc.SetID(*u)
	}
	return edc
}

// Mutation returns the ExperienceDataMutation object of the builder.
func (edc *ExperienceDataCreate) Mutation() *ExperienceDataMutation {
	return edc.mutation
}

// Save creates the ExperienceData in the database.
func (edc *ExperienceDataCreate) Save(ctx context.Context) (*ExperienceData, error) {
	edc.defaults()
	return withHooks(ctx, edc.sqlSave, edc.mutation, edc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (edc *ExperienceDataCreate) SaveX(ctx context.Context) *ExperienceData {
	v, err := edc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (edc *ExperienceDataCreate) Exec(ctx context.Context) error {
	_, err := edc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (edc *ExperienceDataCreate) ExecX(ctx context.Context) {
	if err := edc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (edc *ExperienceDataCreate) defaults() {
	if _, ok := edc.mutation.CollectedAt(); !ok {
		v := experiencedata.DefaultCollectedAt()
		edc.mutation.SetCollectedAt(v)
	}
	if _, ok := edc.mutation.CreatedAt(); !ok {
		v := experiencedata.DefaultCreatedAt()
		edc.mutation.SetCreatedAt(v)
	}
	if _, ok := edc.mutation.UpdatedAt(); !ok {
		v := experiencedata.DefaultUpdatedAt()
		edc.mutation.SetUpdatedAt(v)
	}
	if _, ok := edc.mutation.ID(); !ok {
		v := experiencedata.DefaultID()
		edc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (edc *ExperienceDataCreate) check() error {
	if _, ok := edc.mutation.CollectedAt(); !ok {
		return &ValidationError{Name: "collected_at", err: errors.New(`ent: missing required field "ExperienceData.collected_at"`)}
	}
	if _, ok := edc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ExperienceData.created_at"`)}
	}
	if _, ok := edc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ExperienceData.updated_at"`)}
	}
	if _, ok := edc.mutation.SourceType(); !ok {
		return &ValidationError{Name: "source_type", err: errors.New(`ent: missing required field "ExperienceData.source_type"`)}
	}
	if v, ok := edc.mutation.SourceType(); ok {
		if err := experiencedata.SourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "source_type", err: fmt.Errorf(`ent: validator failed for field "ExperienceData.source_type": %w`, err)}
		}
	}
	if _, ok := edc.mutation.FieldID(); !ok {
		return &ValidationError{Name: "field_id", err: errors.New(`ent: missing required field "ExperienceData.field_id"`)}
	}
	if v, ok := edc.mutation.FieldID(); ok {
		if err := experiencedata.FieldIDValidator(v); err != nil {
			return &ValidationError{Name: "field_id", err: fmt.Errorf(`ent: validator failed for field "ExperienceData.field_id": %w`, err)}
		}
	}
	if _, ok := edc.mutation.FieldType(); !ok {
		return &ValidationError{Name: "field_type", err: errors.New(`ent: missing required field "ExperienceData.field_type"`)}
	}
	if v, ok := edc.mutation.FieldType(); ok {
		if err := experiencedata.FieldTypeValidator(v); err != nil {
			return &ValidationError{Name: "field_type", err: fmt.Errorf(`ent: validator failed for field "ExperienceData.field_type": %w`, err)}
		}
	}
	if v, ok := edc.mutation.Language(); ok {
		if err := experiencedata.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "ExperienceData.language": %w`, err)}
		}
	}
	return nil
}

func (edc *ExperienceDataCreate) sqlSave(ctx context.Context) (*ExperienceData, error) {
	if err := edc.check(); err != nil {
		return nil, err
	}
	_node, _spec := edc.createSpec()
	if err := sqlgraph.CreateNode(ctx, edc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	edc.mutation.id = &_node.ID
	edc.mutation.done = true
	return _node, nil
}

func (edc *ExperienceDataCreate) createSpec() (*ExperienceData, *sqlgraph.CreateSpec) {
	var (
		_node = &ExperienceData{config: edc.config}
		_spec = sqlgraph.NewCreateSpec(experiencedata.Table, sqlgraph.NewFieldSpec(experiencedata.FieldID, field.TypeUUID))
	)
	if id, ok := edc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := edc.mutation.CollectedAt(); ok {
		_spec.SetField(experiencedata.FieldCollectedAt, field.TypeTime, value)
		_node.CollectedAt = value
	}
	if value, ok := edc.mutation.CreatedAt(); ok {
		_spec.SetField(experiencedata.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := edc.mutation.UpdatedAt(); ok {
		_spec.SetField(experiencedata.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := edc.mutation.SourceType(); ok {
		_spec.SetField(experiencedata.FieldSourceType, field.TypeString, value)
		_node.SourceType = value
	}
	if value, ok := edc.mutation.SourceID(); ok {
		_spec.SetField(experiencedata.FieldSourceID, field.TypeString, value)
		_node.SourceID = value
	}
	if value, ok := edc.mutation.SourceName(); ok {
		_spec.SetField(experiencedata.FieldSourceName, field.TypeString, value)
		_node.SourceName = value
	}
	if value, ok := edc.mutation.FieldID(); ok {
		_spec.SetField(experiencedata.FieldFieldID, field.TypeString, value)
		_node.FieldID = value
	}
	if value, ok := edc.mutation.FieldLabel(); ok {
		_spec.SetField(experiencedata.FieldFieldLabel, field.TypeString, value)
		_node.FieldLabel = value
	}
	if value, ok := edc.mutation.FieldType(); ok {
		_spec.SetField(experiencedata.FieldFieldType, field.TypeString, value)
		_node.FieldType = value
	}
	if value, ok := edc.mutation.ValueText(); ok {
		_spec.SetField(experiencedata.FieldValueText, field.TypeString, value)
		_node.ValueText = &value
	}
	if value, ok := edc.mutation.ValueNumber(); ok {
		_spec.SetField(experiencedata.FieldValueNumber, field.TypeFloat64, value)
		_node.ValueNumber = &value
	}
	if value, ok := edc.mutation.ValueBoolean(); ok {
		_spec.SetField(experiencedata.FieldValueBoolean, field.TypeBool, value)
		_node.ValueBoolean = &value
	}
	if value, ok := edc.mutation.ValueDate(); ok {
		_spec.SetField(experiencedata.FieldValueDate, field.TypeTime, value)
		_node.ValueDate = &value
	}
	if value, ok := edc.mutation.ValueJSON(); ok {
		_spec.SetField(experiencedata.FieldValueJSON, field.TypeJSON, value)
		_node.ValueJSON = value
	}
	if value, ok := edc.mutation.Metadata(); ok {
		_spec.SetField(experiencedata.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := edc.mutation.Language(); ok {
		_spec.SetField(experiencedata.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := edc.mutation.Sentiment(); ok {
		_spec.SetField(experiencedata.FieldSentiment, field.TypeString, value)
		_node.Sentiment = &value
	}
	if value, ok := edc.mutation.SentimentScore(); ok {
		_spec.SetField(experiencedata.FieldSentimentScore, field.TypeFloat64, value)
		_node.SentimentScore = &value
	}
	if value, ok := edc.mutation.Emotion(); ok {
		_spec.SetField(experiencedata.FieldEmotion, field.TypeString, value)
		_node.Emotion = &value
	}
	if value, ok := edc.mutation.Topics(); ok {
		_spec.SetField(experiencedata.FieldTopics, field.TypeJSON, value)
		_node.Topics = value
	}
	if value, ok := edc.mutation.UserIdentifier(); ok {
		_spec.SetField(experiencedata.FieldUserIdentifier, field.TypeString, value)
		_node.UserIdentifier = value
	}
	if value, ok := edc.mutation.Embedding(); ok {
		_spec.SetField(experiencedata.FieldEmbedding, field.TypeOther, value)
		_node.Embedding = &value
	}
	if value, ok := edc.mutation.EmbeddingModel(); ok {
		_spec.SetField(experiencedata.FieldEmbeddingModel, field.TypeString, value)
		_node.EmbeddingModel = &value
	}
	return _node, _spec
}

// ExperienceDataCreateBulk is the builder for creating many ExperienceData entities in bulk.
type ExperienceDataCreateBulk struct {
	config
	err      error
	builders []*ExperienceDataCreate
}

// Save creates the ExperienceData entities in the database.
func (edcb *ExperienceDataCreateBulk) Save(ctx context.Context) ([]*ExperienceData, error) {
	if edcb.err != nil {
		return nil, edcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(edcb.builders))
	nodes := make([]*ExperienceData, len(edcb.builders))
	mutators := make([]Mutator, len(edcb.builders))
	for i := range edcb.builders {
		func(i int, root context.Context) {
			builder := edcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExperienceDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, edcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, edcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, edcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (edcb *ExperienceDataCreateBulk) SaveX(ctx context.Context) []*ExperienceData {
	v, err := edcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (edcb *ExperienceDataCreateBulk) Exec(ctx context.Context) error {
	_, err := edcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (edcb *ExperienceDataCreateBulk) ExecX(ctx context.Context) {
	if err := edcb.Exec(ctx); err != nil {
		panic(err)
	}
}
