// Code generated by ent, DO NOT EDIT.

package experiencedata

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/formbricks/hub/apps/hub/internal/ent/predicate"
	"github.com/google/uuid"
	pgvector "github.com/pgvector/pgvector-go"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLTE(FieldID, id))
}

// CollectedAt applies equality check predicate on the "collected_at" field. It's identical to CollectedAtEQ.
func CollectedAt(v time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldCollectedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldUpdatedAt, v))
}

// SourceType applies equality check predicate on the "source_type" field. It's identical to SourceTypeEQ.
func SourceType(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldSourceType, v))
}

// SourceID applies equality check predicate on the "source_id" field. It's identical to SourceIDEQ.
func SourceID(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldSourceID, v))
}

// SourceName applies equality check predicate on the "source_name" field. It's identical to SourceNameEQ.
func SourceName(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldSourceName, v))
}

// FieldLabel applies equality check predicate on the "field_label" field. It's identical to FieldLabelEQ.
func FieldLabel(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldFieldLabel, v))
}

// FieldType applies equality check predicate on the "field_type" field. It's identical to FieldTypeEQ.
func FieldType(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldFieldType, v))
}

// ValueText applies equality check predicate on the "value_text" field. It's identical to ValueTextEQ.
func ValueText(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldValueText, v))
}

// ValueNumber applies equality check predicate on the "value_number" field. It's identical to ValueNumberEQ.
func ValueNumber(v float64) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldValueNumber, v))
}

// ValueBoolean applies equality check predicate on the "value_boolean" field. It's identical to ValueBooleanEQ.
func ValueBoolean(v bool) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldValueBoolean, v))
}

// ValueDate applies equality check predicate on the "value_date" field. It's identical to ValueDateEQ.
func ValueDate(v time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldValueDate, v))
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldLanguage, v))
}

// Sentiment applies equality check predicate on the "sentiment" field. It's identical to SentimentEQ.
func Sentiment(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldSentiment, v))
}

// SentimentScore applies equality check predicate on the "sentiment_score" field. It's identical to SentimentScoreEQ.
func SentimentScore(v float64) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldSentimentScore, v))
}

// Emotion applies equality check predicate on the "emotion" field. It's identical to EmotionEQ.
func Emotion(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldEmotion, v))
}

// UserIdentifier applies equality check predicate on the "user_identifier" field. It's identical to UserIdentifierEQ.
func UserIdentifier(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldUserIdentifier, v))
}

// Embedding applies equality check predicate on the "embedding" field. It's identical to EmbeddingEQ.
func Embedding(v pgvector.Vector) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldEmbedding, v))
}

// EmbeddingModel applies equality check predicate on the "embedding_model" field. It's identical to EmbeddingModelEQ.
func EmbeddingModel(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldEmbeddingModel, v))
}

// CollectedAtEQ applies the EQ predicate on the "collected_at" field.
func CollectedAtEQ(v time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldCollectedAt, v))
}

// CollectedAtNEQ applies the NEQ predicate on the "collected_at" field.
func CollectedAtNEQ(v time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNEQ(FieldCollectedAt, v))
}

// CollectedAtIn applies the In predicate on the "collected_at" field.
func CollectedAtIn(vs ...time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIn(FieldCollectedAt, vs...))
}

// CollectedAtNotIn applies the NotIn predicate on the "collected_at" field.
func CollectedAtNotIn(vs ...time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotIn(FieldCollectedAt, vs...))
}

// CollectedAtGT applies the GT predicate on the "collected_at" field.
func CollectedAtGT(v time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGT(FieldCollectedAt, v))
}

// CollectedAtGTE applies the GTE predicate on the "collected_at" field.
func CollectedAtGTE(v time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGTE(FieldCollectedAt, v))
}

// CollectedAtLT applies the LT predicate on the "collected_at" field.
func CollectedAtLT(v time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLT(FieldCollectedAt, v))
}

// CollectedAtLTE applies the LTE predicate on the "collected_at" field.
func CollectedAtLTE(v time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLTE(FieldCollectedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLTE(FieldUpdatedAt, v))
}

// SourceTypeEQ applies the EQ predicate on the "source_type" field.
func SourceTypeEQ(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldSourceType, v))
}

// SourceTypeNEQ applies the NEQ predicate on the "source_type" field.
func SourceTypeNEQ(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNEQ(FieldSourceType, v))
}

// SourceTypeIn applies the In predicate on the "source_type" field.
func SourceTypeIn(vs ...string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIn(FieldSourceType, vs...))
}

// SourceTypeNotIn applies the NotIn predicate on the "source_type" field.
func SourceTypeNotIn(vs ...string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotIn(FieldSourceType, vs...))
}

// SourceTypeGT applies the GT predicate on the "source_type" field.
func SourceTypeGT(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGT(FieldSourceType, v))
}

// SourceTypeGTE applies the GTE predicate on the "source_type" field.
func SourceTypeGTE(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGTE(FieldSourceType, v))
}

// SourceTypeLT applies the LT predicate on the "source_type" field.
func SourceTypeLT(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLT(FieldSourceType, v))
}

// SourceTypeLTE applies the LTE predicate on the "source_type" field.
func SourceTypeLTE(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLTE(FieldSourceType, v))
}

// SourceTypeContains applies the Contains predicate on the "source_type" field.
func SourceTypeContains(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldContains(FieldSourceType, v))
}

// SourceTypeHasPrefix applies the HasPrefix predicate on the "source_type" field.
func SourceTypeHasPrefix(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldHasPrefix(FieldSourceType, v))
}

// SourceTypeHasSuffix applies the HasSuffix predicate on the "source_type" field.
func SourceTypeHasSuffix(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldHasSuffix(FieldSourceType, v))
}

// SourceTypeEqualFold applies the EqualFold predicate on the "source_type" field.
func SourceTypeEqualFold(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEqualFold(FieldSourceType, v))
}

// SourceTypeContainsFold applies the ContainsFold predicate on the "source_type" field.
func SourceTypeContainsFold(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldContainsFold(FieldSourceType, v))
}

// SourceIDEQ applies the EQ predicate on the "source_id" field.
func SourceIDEQ(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldSourceID, v))
}

// SourceIDNEQ applies the NEQ predicate on the "source_id" field.
func SourceIDNEQ(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNEQ(FieldSourceID, v))
}

// SourceIDIn applies the In predicate on the "source_id" field.
func SourceIDIn(vs ...string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIn(FieldSourceID, vs...))
}

// SourceIDNotIn applies the NotIn predicate on the "source_id" field.
func SourceIDNotIn(vs ...string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotIn(FieldSourceID, vs...))
}

// SourceIDGT applies the GT predicate on the "source_id" field.
func SourceIDGT(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGT(FieldSourceID, v))
}

// SourceIDGTE applies the GTE predicate on the "source_id" field.
func SourceIDGTE(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGTE(FieldSourceID, v))
}

// SourceIDLT applies the LT predicate on the "source_id" field.
func SourceIDLT(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLT(FieldSourceID, v))
}

// SourceIDLTE applies the LTE predicate on the "source_id" field.
func SourceIDLTE(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLTE(FieldSourceID, v))
}

// SourceIDContains applies the Contains predicate on the "source_id" field.
func SourceIDContains(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldContains(FieldSourceID, v))
}

// SourceIDHasPrefix applies the HasPrefix predicate on the "source_id" field.
func SourceIDHasPrefix(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldHasPrefix(FieldSourceID, v))
}

// SourceIDHasSuffix applies the HasSuffix predicate on the "source_id" field.
func SourceIDHasSuffix(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldHasSuffix(FieldSourceID, v))
}

// SourceIDIsNil applies the IsNil predicate on the "source_id" field.
func SourceIDIsNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIsNull(FieldSourceID))
}

// SourceIDNotNil applies the NotNil predicate on the "source_id" field.
func SourceIDNotNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotNull(FieldSourceID))
}

// SourceIDEqualFold applies the EqualFold predicate on the "source_id" field.
func SourceIDEqualFold(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEqualFold(FieldSourceID, v))
}

// SourceIDContainsFold applies the ContainsFold predicate on the "source_id" field.
func SourceIDContainsFold(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldContainsFold(FieldSourceID, v))
}

// SourceNameEQ applies the EQ predicate on the "source_name" field.
func SourceNameEQ(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldSourceName, v))
}

// SourceNameNEQ applies the NEQ predicate on the "source_name" field.
func SourceNameNEQ(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNEQ(FieldSourceName, v))
}

// SourceNameIn applies the In predicate on the "source_name" field.
func SourceNameIn(vs ...string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIn(FieldSourceName, vs...))
}

// SourceNameNotIn applies the NotIn predicate on the "source_name" field.
func SourceNameNotIn(vs ...string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotIn(FieldSourceName, vs...))
}

// SourceNameGT applies the GT predicate on the "source_name" field.
func SourceNameGT(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGT(FieldSourceName, v))
}

// SourceNameGTE applies the GTE predicate on the "source_name" field.
func SourceNameGTE(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGTE(FieldSourceName, v))
}

// SourceNameLT applies the LT predicate on the "source_name" field.
func SourceNameLT(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLT(FieldSourceName, v))
}

// SourceNameLTE applies the LTE predicate on the "source_name" field.
func SourceNameLTE(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLTE(FieldSourceName, v))
}

// SourceNameContains applies the Contains predicate on the "source_name" field.
func SourceNameContains(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldContains(FieldSourceName, v))
}

// SourceNameHasPrefix applies the HasPrefix predicate on the "source_name" field.
func SourceNameHasPrefix(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldHasPrefix(FieldSourceName, v))
}

// SourceNameHasSuffix applies the HasSuffix predicate on the "source_name" field.
func SourceNameHasSuffix(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldHasSuffix(FieldSourceName, v))
}

// SourceNameIsNil applies the IsNil predicate on the "source_name" field.
func SourceNameIsNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIsNull(FieldSourceName))
}

// SourceNameNotNil applies the NotNil predicate on the "source_name" field.
func SourceNameNotNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotNull(FieldSourceName))
}

// SourceNameEqualFold applies the EqualFold predicate on the "source_name" field.
func SourceNameEqualFold(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEqualFold(FieldSourceName, v))
}

// SourceNameContainsFold applies the ContainsFold predicate on the "source_name" field.
func SourceNameContainsFold(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldContainsFold(FieldSourceName, v))
}

// FieldIDEQ applies the EQ predicate on the "field_id" field.
func FieldIDEQ(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldFieldID, v))
}

// FieldIDNEQ applies the NEQ predicate on the "field_id" field.
func FieldIDNEQ(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNEQ(FieldFieldID, v))
}

// FieldIDIn applies the In predicate on the "field_id" field.
func FieldIDIn(vs ...string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIn(FieldFieldID, vs...))
}

// FieldIDNotIn applies the NotIn predicate on the "field_id" field.
func FieldIDNotIn(vs ...string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotIn(FieldFieldID, vs...))
}

// FieldIDGT applies the GT predicate on the "field_id" field.
func FieldIDGT(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGT(FieldFieldID, v))
}

// FieldIDGTE applies the GTE predicate on the "field_id" field.
func FieldIDGTE(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGTE(FieldFieldID, v))
}

// FieldIDLT applies the LT predicate on the "field_id" field.
func FieldIDLT(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLT(FieldFieldID, v))
}

// FieldIDLTE applies the LTE predicate on the "field_id" field.
func FieldIDLTE(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLTE(FieldFieldID, v))
}

// FieldIDContains applies the Contains predicate on the "field_id" field.
func FieldIDContains(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldContains(FieldFieldID, v))
}

// FieldIDHasPrefix applies the HasPrefix predicate on the "field_id" field.
func FieldIDHasPrefix(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldHasPrefix(FieldFieldID, v))
}

// FieldIDHasSuffix applies the HasSuffix predicate on the "field_id" field.
func FieldIDHasSuffix(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldHasSuffix(FieldFieldID, v))
}

// FieldIDEqualFold applies the EqualFold predicate on the "field_id" field.
func FieldIDEqualFold(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEqualFold(FieldFieldID, v))
}

// FieldIDContainsFold applies the ContainsFold predicate on the "field_id" field.
func FieldIDContainsFold(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldContainsFold(FieldFieldID, v))
}

// FieldLabelEQ applies the EQ predicate on the "field_label" field.
func FieldLabelEQ(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldFieldLabel, v))
}

// FieldLabelNEQ applies the NEQ predicate on the "field_label" field.
func FieldLabelNEQ(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNEQ(FieldFieldLabel, v))
}

// FieldLabelIn applies the In predicate on the "field_label" field.
func FieldLabelIn(vs ...string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIn(FieldFieldLabel, vs...))
}

// FieldLabelNotIn applies the NotIn predicate on the "field_label" field.
func FieldLabelNotIn(vs ...string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotIn(FieldFieldLabel, vs...))
}

// FieldLabelGT applies the GT predicate on the "field_label" field.
func FieldLabelGT(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGT(FieldFieldLabel, v))
}

// FieldLabelGTE applies the GTE predicate on the "field_label" field.
func FieldLabelGTE(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGTE(FieldFieldLabel, v))
}

// FieldLabelLT applies the LT predicate on the "field_label" field.
func FieldLabelLT(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLT(FieldFieldLabel, v))
}

// FieldLabelLTE applies the LTE predicate on the "field_label" field.
func FieldLabelLTE(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLTE(FieldFieldLabel, v))
}

// FieldLabelContains applies the Contains predicate on the "field_label" field.
func FieldLabelContains(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldContains(FieldFieldLabel, v))
}

// FieldLabelHasPrefix applies the HasPrefix predicate on the "field_label" field.
func FieldLabelHasPrefix(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldHasPrefix(FieldFieldLabel, v))
}

// FieldLabelHasSuffix applies the HasSuffix predicate on the "field_label" field.
func FieldLabelHasSuffix(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldHasSuffix(FieldFieldLabel, v))
}

// FieldLabelIsNil applies the IsNil predicate on the "field_label" field.
func FieldLabelIsNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIsNull(FieldFieldLabel))
}

// FieldLabelNotNil applies the NotNil predicate on the "field_label" field.
func FieldLabelNotNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotNull(FieldFieldLabel))
}

// FieldLabelEqualFold applies the EqualFold predicate on the "field_label" field.
func FieldLabelEqualFold(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEqualFold(FieldFieldLabel, v))
}

// FieldLabelContainsFold applies the ContainsFold predicate on the "field_label" field.
func FieldLabelContainsFold(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldContainsFold(FieldFieldLabel, v))
}

// FieldTypeEQ applies the EQ predicate on the "field_type" field.
func FieldTypeEQ(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldFieldType, v))
}

// FieldTypeNEQ applies the NEQ predicate on the "field_type" field.
func FieldTypeNEQ(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNEQ(FieldFieldType, v))
}

// FieldTypeIn applies the In predicate on the "field_type" field.
func FieldTypeIn(vs ...string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIn(FieldFieldType, vs...))
}

// FieldTypeNotIn applies the NotIn predicate on the "field_type" field.
func FieldTypeNotIn(vs ...string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotIn(FieldFieldType, vs...))
}

// FieldTypeGT applies the GT predicate on the "field_type" field.
func FieldTypeGT(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGT(FieldFieldType, v))
}

// FieldTypeGTE applies the GTE predicate on the "field_type" field.
func FieldTypeGTE(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGTE(FieldFieldType, v))
}

// FieldTypeLT applies the LT predicate on the "field_type" field.
func FieldTypeLT(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLT(FieldFieldType, v))
}

// FieldTypeLTE applies the LTE predicate on the "field_type" field.
func FieldTypeLTE(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLTE(FieldFieldType, v))
}

// FieldTypeContains applies the Contains predicate on the "field_type" field.
func FieldTypeContains(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldContains(FieldFieldType, v))
}

// FieldTypeHasPrefix applies the HasPrefix predicate on the "field_type" field.
func FieldTypeHasPrefix(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldHasPrefix(FieldFieldType, v))
}

// FieldTypeHasSuffix applies the HasSuffix predicate on the "field_type" field.
func FieldTypeHasSuffix(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldHasSuffix(FieldFieldType, v))
}

// FieldTypeEqualFold applies the EqualFold predicate on the "field_type" field.
func FieldTypeEqualFold(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEqualFold(FieldFieldType, v))
}

// FieldTypeContainsFold applies the ContainsFold predicate on the "field_type" field.
func FieldTypeContainsFold(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldContainsFold(FieldFieldType, v))
}

// ValueTextEQ applies the EQ predicate on the "value_text" field.
func ValueTextEQ(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldValueText, v))
}

// ValueTextNEQ applies the NEQ predicate on the "value_text" field.
func ValueTextNEQ(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNEQ(FieldValueText, v))
}

// ValueTextIn applies the In predicate on the "value_text" field.
func ValueTextIn(vs ...string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIn(FieldValueText, vs...))
}

// ValueTextNotIn applies the NotIn predicate on the "value_text" field.
func ValueTextNotIn(vs ...string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotIn(FieldValueText, vs...))
}

// ValueTextGT applies the GT predicate on the "value_text" field.
func ValueTextGT(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGT(FieldValueText, v))
}

// ValueTextGTE applies the GTE predicate on the "value_text" field.
func ValueTextGTE(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGTE(FieldValueText, v))
}

// ValueTextLT applies the LT predicate on the "value_text" field.
func ValueTextLT(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLT(FieldValueText, v))
}

// ValueTextLTE applies the LTE predicate on the "value_text" field.
func ValueTextLTE(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLTE(FieldValueText, v))
}

// ValueTextContains applies the Contains predicate on the "value_text" field.
func ValueTextContains(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldContains(FieldValueText, v))
}

// ValueTextHasPrefix applies the HasPrefix predicate on the "value_text" field.
func ValueTextHasPrefix(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldHasPrefix(FieldValueText, v))
}

// ValueTextHasSuffix applies the HasSuffix predicate on the "value_text" field.
func ValueTextHasSuffix(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldHasSuffix(FieldValueText, v))
}

// ValueTextIsNil applies the IsNil predicate on the "value_text" field.
func ValueTextIsNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIsNull(FieldValueText))
}

// ValueTextNotNil applies the NotNil predicate on the "value_text" field.
func ValueTextNotNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotNull(FieldValueText))
}

// ValueTextEqualFold applies the EqualFold predicate on the "value_text" field.
func ValueTextEqualFold(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEqualFold(FieldValueText, v))
}

// ValueTextContainsFold applies the ContainsFold predicate on the "value_text" field.
func ValueTextContainsFold(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldContainsFold(FieldValueText, v))
}

// ValueNumberEQ applies the EQ predicate on the "value_number" field.
func ValueNumberEQ(v float64) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldValueNumber, v))
}

// ValueNumberNEQ applies the NEQ predicate on the "value_number" field.
func ValueNumberNEQ(v float64) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNEQ(FieldValueNumber, v))
}

// ValueNumberIn applies the In predicate on the "value_number" field.
func ValueNumberIn(vs ...float64) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIn(FieldValueNumber, vs...))
}

// ValueNumberNotIn applies the NotIn predicate on the "value_number" field.
func ValueNumberNotIn(vs ...float64) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotIn(FieldValueNumber, vs...))
}

// ValueNumberGT applies the GT predicate on the "value_number" field.
func ValueNumberGT(v float64) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGT(FieldValueNumber, v))
}

// ValueNumberGTE applies the GTE predicate on the "value_number" field.
func ValueNumberGTE(v float64) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGTE(FieldValueNumber, v))
}

// ValueNumberLT applies the LT predicate on the "value_number" field.
func ValueNumberLT(v float64) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLT(FieldValueNumber, v))
}

// ValueNumberLTE applies the LTE predicate on the "value_number" field.
func ValueNumberLTE(v float64) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLTE(FieldValueNumber, v))
}

// ValueNumberIsNil applies the IsNil predicate on the "value_number" field.
func ValueNumberIsNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIsNull(FieldValueNumber))
}

// ValueNumberNotNil applies the NotNil predicate on the "value_number" field.
func ValueNumberNotNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotNull(FieldValueNumber))
}

// ValueBooleanEQ applies the EQ predicate on the "value_boolean" field.
func ValueBooleanEQ(v bool) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldValueBoolean, v))
}

// ValueBooleanNEQ applies the NEQ predicate on the "value_boolean" field.
func ValueBooleanNEQ(v bool) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNEQ(FieldValueBoolean, v))
}

// ValueBooleanIsNil applies the IsNil predicate on the "value_boolean" field.
func ValueBooleanIsNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIsNull(FieldValueBoolean))
}

// ValueBooleanNotNil applies the NotNil predicate on the "value_boolean" field.
func ValueBooleanNotNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotNull(FieldValueBoolean))
}

// ValueDateEQ applies the EQ predicate on the "value_date" field.
func ValueDateEQ(v time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldValueDate, v))
}

// ValueDateNEQ applies the NEQ predicate on the "value_date" field.
func ValueDateNEQ(v time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNEQ(FieldValueDate, v))
}

// ValueDateIn applies the In predicate on the "value_date" field.
func ValueDateIn(vs ...time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIn(FieldValueDate, vs...))
}

// ValueDateNotIn applies the NotIn predicate on the "value_date" field.
func ValueDateNotIn(vs ...time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotIn(FieldValueDate, vs...))
}

// ValueDateGT applies the GT predicate on the "value_date" field.
func ValueDateGT(v time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGT(FieldValueDate, v))
}

// ValueDateGTE applies the GTE predicate on the "value_date" field.
func ValueDateGTE(v time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGTE(FieldValueDate, v))
}

// ValueDateLT applies the LT predicate on the "value_date" field.
func ValueDateLT(v time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLT(FieldValueDate, v))
}

// ValueDateLTE applies the LTE predicate on the "value_date" field.
func ValueDateLTE(v time.Time) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLTE(FieldValueDate, v))
}

// ValueDateIsNil applies the IsNil predicate on the "value_date" field.
func ValueDateIsNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIsNull(FieldValueDate))
}

// ValueDateNotNil applies the NotNil predicate on the "value_date" field.
func ValueDateNotNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotNull(FieldValueDate))
}

// ValueJSONIsNil applies the IsNil predicate on the "value_json" field.
func ValueJSONIsNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIsNull(FieldValueJSON))
}

// ValueJSONNotNil applies the NotNil predicate on the "value_json" field.
func ValueJSONNotNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotNull(FieldValueJSON))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotNull(FieldMetadata))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotIn(FieldLanguage, vs...))
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGT(FieldLanguage, v))
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGTE(FieldLanguage, v))
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLT(FieldLanguage, v))
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLTE(FieldLanguage, v))
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldContains(FieldLanguage, v))
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldHasPrefix(FieldLanguage, v))
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldHasSuffix(FieldLanguage, v))
}

// LanguageIsNil applies the IsNil predicate on the "language" field.
func LanguageIsNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIsNull(FieldLanguage))
}

// LanguageNotNil applies the NotNil predicate on the "language" field.
func LanguageNotNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotNull(FieldLanguage))
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEqualFold(FieldLanguage, v))
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldContainsFold(FieldLanguage, v))
}

// SentimentEQ applies the EQ predicate on the "sentiment" field.
func SentimentEQ(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldSentiment, v))
}

// SentimentNEQ applies the NEQ predicate on the "sentiment" field.
func SentimentNEQ(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNEQ(FieldSentiment, v))
}

// SentimentIn applies the In predicate on the "sentiment" field.
func SentimentIn(vs ...string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIn(FieldSentiment, vs...))
}

// SentimentNotIn applies the NotIn predicate on the "sentiment" field.
func SentimentNotIn(vs ...string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotIn(FieldSentiment, vs...))
}

// SentimentGT applies the GT predicate on the "sentiment" field.
func SentimentGT(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGT(FieldSentiment, v))
}

// SentimentGTE applies the GTE predicate on the "sentiment" field.
func SentimentGTE(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGTE(FieldSentiment, v))
}

// SentimentLT applies the LT predicate on the "sentiment" field.
func SentimentLT(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLT(FieldSentiment, v))
}

// SentimentLTE applies the LTE predicate on the "sentiment" field.
func SentimentLTE(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLTE(FieldSentiment, v))
}

// SentimentContains applies the Contains predicate on the "sentiment" field.
func SentimentContains(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldContains(FieldSentiment, v))
}

// SentimentHasPrefix applies the HasPrefix predicate on the "sentiment" field.
func SentimentHasPrefix(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldHasPrefix(FieldSentiment, v))
}

// SentimentHasSuffix applies the HasSuffix predicate on the "sentiment" field.
func SentimentHasSuffix(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldHasSuffix(FieldSentiment, v))
}

// SentimentIsNil applies the IsNil predicate on the "sentiment" field.
func SentimentIsNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIsNull(FieldSentiment))
}

// SentimentNotNil applies the NotNil predicate on the "sentiment" field.
func SentimentNotNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotNull(FieldSentiment))
}

// SentimentEqualFold applies the EqualFold predicate on the "sentiment" field.
func SentimentEqualFold(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEqualFold(FieldSentiment, v))
}

// SentimentContainsFold applies the ContainsFold predicate on the "sentiment" field.
func SentimentContainsFold(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldContainsFold(FieldSentiment, v))
}

// SentimentScoreEQ applies the EQ predicate on the "sentiment_score" field.
func SentimentScoreEQ(v float64) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldSentimentScore, v))
}

// SentimentScoreNEQ applies the NEQ predicate on the "sentiment_score" field.
func SentimentScoreNEQ(v float64) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNEQ(FieldSentimentScore, v))
}

// SentimentScoreIn applies the In predicate on the "sentiment_score" field.
func SentimentScoreIn(vs ...float64) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIn(FieldSentimentScore, vs...))
}

// SentimentScoreNotIn applies the NotIn predicate on the "sentiment_score" field.
func SentimentScoreNotIn(vs ...float64) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotIn(FieldSentimentScore, vs...))
}

// SentimentScoreGT applies the GT predicate on the "sentiment_score" field.
func SentimentScoreGT(v float64) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGT(FieldSentimentScore, v))
}

// SentimentScoreGTE applies the GTE predicate on the "sentiment_score" field.
func SentimentScoreGTE(v float64) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGTE(FieldSentimentScore, v))
}

// SentimentScoreLT applies the LT predicate on the "sentiment_score" field.
func SentimentScoreLT(v float64) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLT(FieldSentimentScore, v))
}

// SentimentScoreLTE applies the LTE predicate on the "sentiment_score" field.
func SentimentScoreLTE(v float64) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLTE(FieldSentimentScore, v))
}

// SentimentScoreIsNil applies the IsNil predicate on the "sentiment_score" field.
func SentimentScoreIsNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIsNull(FieldSentimentScore))
}

// SentimentScoreNotNil applies the NotNil predicate on the "sentiment_score" field.
func SentimentScoreNotNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotNull(FieldSentimentScore))
}

// EmotionEQ applies the EQ predicate on the "emotion" field.
func EmotionEQ(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldEmotion, v))
}

// EmotionNEQ applies the NEQ predicate on the "emotion" field.
func EmotionNEQ(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNEQ(FieldEmotion, v))
}

// EmotionIn applies the In predicate on the "emotion" field.
func EmotionIn(vs ...string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIn(FieldEmotion, vs...))
}

// EmotionNotIn applies the NotIn predicate on the "emotion" field.
func EmotionNotIn(vs ...string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotIn(FieldEmotion, vs...))
}

// EmotionGT applies the GT predicate on the "emotion" field.
func EmotionGT(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGT(FieldEmotion, v))
}

// EmotionGTE applies the GTE predicate on the "emotion" field.
func EmotionGTE(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGTE(FieldEmotion, v))
}

// EmotionLT applies the LT predicate on the "emotion" field.
func EmotionLT(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLT(FieldEmotion, v))
}

// EmotionLTE applies the LTE predicate on the "emotion" field.
func EmotionLTE(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLTE(FieldEmotion, v))
}

// EmotionContains applies the Contains predicate on the "emotion" field.
func EmotionContains(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldContains(FieldEmotion, v))
}

// EmotionHasPrefix applies the HasPrefix predicate on the "emotion" field.
func EmotionHasPrefix(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldHasPrefix(FieldEmotion, v))
}

// EmotionHasSuffix applies the HasSuffix predicate on the "emotion" field.
func EmotionHasSuffix(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldHasSuffix(FieldEmotion, v))
}

// EmotionIsNil applies the IsNil predicate on the "emotion" field.
func EmotionIsNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIsNull(FieldEmotion))
}

// EmotionNotNil applies the NotNil predicate on the "emotion" field.
func EmotionNotNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotNull(FieldEmotion))
}

// EmotionEqualFold applies the EqualFold predicate on the "emotion" field.
func EmotionEqualFold(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEqualFold(FieldEmotion, v))
}

// EmotionContainsFold applies the ContainsFold predicate on the "emotion" field.
func EmotionContainsFold(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldContainsFold(FieldEmotion, v))
}

// TopicsIsNil applies the IsNil predicate on the "topics" field.
func TopicsIsNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIsNull(FieldTopics))
}

// TopicsNotNil applies the NotNil predicate on the "topics" field.
func TopicsNotNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotNull(FieldTopics))
}

// UserIdentifierEQ applies the EQ predicate on the "user_identifier" field.
func UserIdentifierEQ(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldUserIdentifier, v))
}

// UserIdentifierNEQ applies the NEQ predicate on the "user_identifier" field.
func UserIdentifierNEQ(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNEQ(FieldUserIdentifier, v))
}

// UserIdentifierIn applies the In predicate on the "user_identifier" field.
func UserIdentifierIn(vs ...string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIn(FieldUserIdentifier, vs...))
}

// UserIdentifierNotIn applies the NotIn predicate on the "user_identifier" field.
func UserIdentifierNotIn(vs ...string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotIn(FieldUserIdentifier, vs...))
}

// UserIdentifierGT applies the GT predicate on the "user_identifier" field.
func UserIdentifierGT(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGT(FieldUserIdentifier, v))
}

// UserIdentifierGTE applies the GTE predicate on the "user_identifier" field.
func UserIdentifierGTE(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGTE(FieldUserIdentifier, v))
}

// UserIdentifierLT applies the LT predicate on the "user_identifier" field.
func UserIdentifierLT(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLT(FieldUserIdentifier, v))
}

// UserIdentifierLTE applies the LTE predicate on the "user_identifier" field.
func UserIdentifierLTE(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLTE(FieldUserIdentifier, v))
}

// UserIdentifierContains applies the Contains predicate on the "user_identifier" field.
func UserIdentifierContains(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldContains(FieldUserIdentifier, v))
}

// UserIdentifierHasPrefix applies the HasPrefix predicate on the "user_identifier" field.
func UserIdentifierHasPrefix(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldHasPrefix(FieldUserIdentifier, v))
}

// UserIdentifierHasSuffix applies the HasSuffix predicate on the "user_identifier" field.
func UserIdentifierHasSuffix(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldHasSuffix(FieldUserIdentifier, v))
}

// UserIdentifierIsNil applies the IsNil predicate on the "user_identifier" field.
func UserIdentifierIsNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIsNull(FieldUserIdentifier))
}

// UserIdentifierNotNil applies the NotNil predicate on the "user_identifier" field.
func UserIdentifierNotNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotNull(FieldUserIdentifier))
}

// UserIdentifierEqualFold applies the EqualFold predicate on the "user_identifier" field.
func UserIdentifierEqualFold(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEqualFold(FieldUserIdentifier, v))
}

// UserIdentifierContainsFold applies the ContainsFold predicate on the "user_identifier" field.
func UserIdentifierContainsFold(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldContainsFold(FieldUserIdentifier, v))
}

// EmbeddingEQ applies the EQ predicate on the "embedding" field.
func EmbeddingEQ(v pgvector.Vector) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldEmbedding, v))
}

// EmbeddingNEQ applies the NEQ predicate on the "embedding" field.
func EmbeddingNEQ(v pgvector.Vector) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNEQ(FieldEmbedding, v))
}

// EmbeddingIn applies the In predicate on the "embedding" field.
func EmbeddingIn(vs ...pgvector.Vector) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIn(FieldEmbedding, vs...))
}

// EmbeddingNotIn applies the NotIn predicate on the "embedding" field.
func EmbeddingNotIn(vs ...pgvector.Vector) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotIn(FieldEmbedding, vs...))
}

// EmbeddingGT applies the GT predicate on the "embedding" field.
func EmbeddingGT(v pgvector.Vector) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGT(FieldEmbedding, v))
}

// EmbeddingGTE applies the GTE predicate on the "embedding" field.
func EmbeddingGTE(v pgvector.Vector) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGTE(FieldEmbedding, v))
}

// EmbeddingLT applies the LT predicate on the "embedding" field.
func EmbeddingLT(v pgvector.Vector) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLT(FieldEmbedding, v))
}

// EmbeddingLTE applies the LTE predicate on the "embedding" field.
func EmbeddingLTE(v pgvector.Vector) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLTE(FieldEmbedding, v))
}

// EmbeddingIsNil applies the IsNil predicate on the "embedding" field.
func EmbeddingIsNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIsNull(FieldEmbedding))
}

// EmbeddingNotNil applies the NotNil predicate on the "embedding" field.
func EmbeddingNotNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotNull(FieldEmbedding))
}

// EmbeddingModelEQ applies the EQ predicate on the "embedding_model" field.
func EmbeddingModelEQ(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEQ(FieldEmbeddingModel, v))
}

// EmbeddingModelNEQ applies the NEQ predicate on the "embedding_model" field.
func EmbeddingModelNEQ(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNEQ(FieldEmbeddingModel, v))
}

// EmbeddingModelIn applies the In predicate on the "embedding_model" field.
func EmbeddingModelIn(vs ...string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIn(FieldEmbeddingModel, vs...))
}

// EmbeddingModelNotIn applies the NotIn predicate on the "embedding_model" field.
func EmbeddingModelNotIn(vs ...string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotIn(FieldEmbeddingModel, vs...))
}

// EmbeddingModelGT applies the GT predicate on the "embedding_model" field.
func EmbeddingModelGT(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGT(FieldEmbeddingModel, v))
}

// EmbeddingModelGTE applies the GTE predicate on the "embedding_model" field.
func EmbeddingModelGTE(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldGTE(FieldEmbeddingModel, v))
}

// EmbeddingModelLT applies the LT predicate on the "embedding_model" field.
func EmbeddingModelLT(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLT(FieldEmbeddingModel, v))
}

// EmbeddingModelLTE applies the LTE predicate on the "embedding_model" field.
func EmbeddingModelLTE(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldLTE(FieldEmbeddingModel, v))
}

// EmbeddingModelContains applies the Contains predicate on the "embedding_model" field.
func EmbeddingModelContains(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldContains(FieldEmbeddingModel, v))
}

// EmbeddingModelHasPrefix applies the HasPrefix predicate on the "embedding_model" field.
func EmbeddingModelHasPrefix(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldHasPrefix(FieldEmbeddingModel, v))
}

// EmbeddingModelHasSuffix applies the HasSuffix predicate on the "embedding_model" field.
func EmbeddingModelHasSuffix(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldHasSuffix(FieldEmbeddingModel, v))
}

// EmbeddingModelIsNil applies the IsNil predicate on the "embedding_model" field.
func EmbeddingModelIsNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldIsNull(FieldEmbeddingModel))
}

// EmbeddingModelNotNil applies the NotNil predicate on the "embedding_model" field.
func EmbeddingModelNotNil() predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldNotNull(FieldEmbeddingModel))
}

// EmbeddingModelEqualFold applies the EqualFold predicate on the "embedding_model" field.
func EmbeddingModelEqualFold(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldEqualFold(FieldEmbeddingModel, v))
}

// EmbeddingModelContainsFold applies the ContainsFold predicate on the "embedding_model" field.
func EmbeddingModelContainsFold(v string) predicate.ExperienceData {
	return predicate.ExperienceData(sql.FieldContainsFold(FieldEmbeddingModel, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ExperienceData) predicate.ExperienceData {
	return predicate.ExperienceData(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ExperienceData) predicate.ExperienceData {
	return predicate.ExperienceData(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ExperienceData) predicate.ExperienceData {
	return predicate.ExperienceData(sql.NotPredicates(p))
}
