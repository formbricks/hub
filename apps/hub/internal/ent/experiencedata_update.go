// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/formbricks/formbricks-rewrite/apps/hub/internal/ent/experiencedata"
	"github.com/formbricks/formbricks-rewrite/apps/hub/internal/ent/predicate"
	pgvector "github.com/pgvector/pgvector-go"
)

// ExperienceDataUpdate is the builder for updating ExperienceData entities.
type ExperienceDataUpdate struct {
	config
	hooks    []Hook
	mutation *ExperienceDataMutation
}

// Where appends a list predicates to the ExperienceDataUpdate builder.
func (edu *ExperienceDataUpdate) Where(ps ...predicate.ExperienceData) *ExperienceDataUpdate {
	edu.mutation.Where(ps...)
	return edu
}

// SetCollectedAt sets the "collected_at" field.
func (edu *ExperienceDataUpdate) SetCollectedAt(t time.Time) *ExperienceDataUpdate {
	edu.mutation.SetCollectedAt(t)
	return edu
}

// SetNillableCollectedAt sets the "collected_at" field if the given value is not nil.
func (edu *ExperienceDataUpdate) SetNillableCollectedAt(t *time.Time) *ExperienceDataUpdate {
	if t != nil {
		edu.SetCollectedAt(*t)
	}
	return edu
}

// SetUpdatedAt sets the "updated_at" field.
func (edu *ExperienceDataUpdate) SetUpdatedAt(t time.Time) *ExperienceDataUpdate {
	edu.mutation.SetUpdatedAt(t)
	return edu
}

// SetSourceType sets the "source_type" field.
func (edu *ExperienceDataUpdate) SetSourceType(s string) *ExperienceDataUpdate {
	edu.mutation.SetSourceType(s)
	return edu
}

// SetNillableSourceType sets the "source_type" field if the given value is not nil.
func (edu *ExperienceDataUpdate) SetNillableSourceType(s *string) *ExperienceDataUpdate {
	if s != nil {
		edu.SetSourceType(*s)
	}
	return edu
}

// SetSourceID sets the "source_id" field.
func (edu *ExperienceDataUpdate) SetSourceID(s string) *ExperienceDataUpdate {
	edu.mutation.SetSourceID(s)
	return edu
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (edu *ExperienceDataUpdate) SetNillableSourceID(s *string) *ExperienceDataUpdate {
	if s != nil {
		edu.SetSourceID(*s)
	}
	return edu
}

// ClearSourceID clears the value of the "source_id" field.
func (edu *ExperienceDataUpdate) ClearSourceID() *ExperienceDataUpdate {
	edu.mutation.ClearSourceID()
	return edu
}

// SetSourceName sets the "source_name" field.
func (edu *ExperienceDataUpdate) SetSourceName(s string) *ExperienceDataUpdate {
	edu.mutation.SetSourceName(s)
	return edu
}

// SetNillableSourceName sets the "source_name" field if the given value is not nil.
func (edu *ExperienceDataUpdate) SetNillableSourceName(s *string) *ExperienceDataUpdate {
	if s != nil {
		edu.SetSourceName(*s)
	}
	return edu
}

// ClearSourceName clears the value of the "source_name" field.
func (edu *ExperienceDataUpdate) ClearSourceName() *ExperienceDataUpdate {
	edu.mutation.ClearSourceName()
	return edu
}

// SetFieldID sets the "field_id" field.
func (edu *ExperienceDataUpdate) SetFieldID(s string) *ExperienceDataUpdate {
	edu.mutation.SetFieldID(s)
	return edu
}

// SetNillableFieldID sets the "field_id" field if the given value is not nil.
func (edu *ExperienceDataUpdate) SetNillableFieldID(s *string) *ExperienceDataUpdate {
	if s != nil {
		edu.SetFieldID(*s)
	}
	return edu
}

// SetFieldLabel sets the "field_label" field.
func (edu *ExperienceDataUpdate) SetFieldLabel(s string) *ExperienceDataUpdate {
	edu.mutation.SetFieldLabel(s)
	return edu
}

// SetNillableFieldLabel sets the "field_label" field if the given value is not nil.
func (edu *ExperienceDataUpdate) SetNillableFieldLabel(s *string) *ExperienceDataUpdate {
	if s != nil {
		edu.SetFieldLabel(*s)
	}
	return edu
}

// ClearFieldLabel clears the value of the "field_label" field.
func (edu *ExperienceDataUpdate) ClearFieldLabel() *ExperienceDataUpdate {
	edu.mutation.ClearFieldLabel()
	return edu
}

// SetFieldType sets the "field_type" field.
func (edu *ExperienceDataUpdate) SetFieldType(s string) *ExperienceDataUpdate {
	edu.mutation.SetFieldType(s)
	return edu
}

// SetNillableFieldType sets the "field_type" field if the given value is not nil.
func (edu *ExperienceDataUpdate) SetNillableFieldType(s *string) *ExperienceDataUpdate {
	if s != nil {
		edu.SetFieldType(*s)
	}
	return edu
}

// SetValueText sets the "value_text" field.
func (edu *ExperienceDataUpdate) SetValueText(s string) *ExperienceDataUpdate {
	edu.mutation.SetValueText(s)
	return edu
}

// SetNillableValueText sets the "value_text" field if the given value is not nil.
func (edu *ExperienceDataUpdate) SetNillableValueText(s *string) *ExperienceDataUpdate {
	if s != nil {
		edu.SetValueText(*s)
	}
	return edu
}

// ClearValueText clears the value of the "value_text" field.
func (edu *ExperienceDataUpdate) ClearValueText() *ExperienceDataUpdate {
	edu.mutation.ClearValueText()
	return edu
}

// SetValueNumber sets the "value_number" field.
func (edu *ExperienceDataUpdate) SetValueNumber(f float64) *ExperienceDataUpdate {
	edu.mutation.ResetValueNumber()
	edu.mutation.SetValueNumber(f)
	return edu
}

// SetNillableValueNumber sets the "value_number" field if the given value is not nil.
func (edu *ExperienceDataUpdate) SetNillableValueNumber(f *float64) *ExperienceDataUpdate {
	if f != nil {
		edu.SetValueNumber(*f)
	}
	return edu
}

// AddValueNumber adds f to the "value_number" field.
func (edu *ExperienceDataUpdate) AddValueNumber(f float64) *ExperienceDataUpdate {
	edu.mutation.AddValueNumber(f)
	return edu
}

// ClearValueNumber clears the value of the "value_number" field.
func (edu *ExperienceDataUpdate) ClearValueNumber() *ExperienceDataUpdate {
	edu.mutation.ClearValueNumber()
	return edu
}

// SetValueBoolean sets the "value_boolean" field.
func (edu *ExperienceDataUpdate) SetValueBoolean(b bool) *ExperienceDataUpdate {
	edu.mutation.SetValueBoolean(b)
	return edu
}

// SetNillableValueBoolean sets the "value_boolean" field if the given value is not nil.
func (edu *ExperienceDataUpdate) SetNillableValueBoolean(b *bool) *ExperienceDataUpdate {
	if b != nil {
		edu.SetValueBoolean(*b)
	}
	return edu
}

// ClearValueBoolean clears the value of the "value_boolean" field.
func (edu *ExperienceDataUpdate) ClearValueBoolean() *ExperienceDataUpdate {
	edu.mutation.ClearValueBoolean()
	return edu
}

// SetValueDate sets the "value_date" field.
func (edu *ExperienceDataUpdate) SetValueDate(t time.Time) *ExperienceDataUpdate {
	edu.mutation.SetValueDate(t)
	return edu
}

// SetNillableValueDate sets the "value_date" field if the given value is not nil.
func (edu *ExperienceDataUpdate) SetNillableValueDate(t *time.Time) *ExperienceDataUpdate {
	if t != nil {
		edu.SetValueDate(*t)
	}
	return edu
}

// ClearValueDate clears the value of the "value_date" field.
func (edu *ExperienceDataUpdate) ClearValueDate() *ExperienceDataUpdate {
	edu.mutation.ClearValueDate()
	return edu
}

// SetValueJSON sets the "value_json" field.
func (edu *ExperienceDataUpdate) SetValueJSON(m map[string]interface{}) *ExperienceDataUpdate {
	edu.mutation.SetValueJSON(m)
	return edu
}

// ClearValueJSON clears the value of the "value_json" field.
func (edu *ExperienceDataUpdate) ClearValueJSON() *ExperienceDataUpdate {
	edu.mutation.ClearValueJSON()
	return edu
}

// SetMetadata sets the "metadata" field.
func (edu *ExperienceDataUpdate) SetMetadata(m map[string]interface{}) *ExperienceDataUpdate {
	edu.mutation.SetMetadata(m)
	return edu
}

// ClearMetadata clears the value of the "metadata" field.
func (edu *ExperienceDataUpdate) ClearMetadata() *ExperienceDataUpdate {
	edu.mutation.ClearMetadata()
	return edu
}

// SetLanguage sets the "language" field.
func (edu *ExperienceDataUpdate) SetLanguage(s string) *ExperienceDataUpdate {
	edu.mutation.SetLanguage(s)
	return edu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (edu *ExperienceDataUpdate) SetNillableLanguage(s *string) *ExperienceDataUpdate {
	if s != nil {
		edu.SetLanguage(*s)
	}
	return edu
}

// ClearLanguage clears the value of the "language" field.
func (edu *ExperienceDataUpdate) ClearLanguage() *ExperienceDataUpdate {
	edu.mutation.ClearLanguage()
	return edu
}

// SetSentiment sets the "sentiment" field.
func (edu *ExperienceDataUpdate) SetSentiment(s string) *ExperienceDataUpdate {
	edu.mutation.SetSentiment(s)
	return edu
}

// SetNillableSentiment sets the "sentiment" field if the given value is not nil.
func (edu *ExperienceDataUpdate) SetNillableSentiment(s *string) *ExperienceDataUpdate {
	if s != nil {
		edu.SetSentiment(*s)
	}
	return edu
}

// ClearSentiment clears the value of the "sentiment" field.
func (edu *ExperienceDataUpdate) ClearSentiment() *ExperienceDataUpdate {
	edu.mutation.ClearSentiment()
	return edu
}

// SetSentimentScore sets the "sentiment_score" field.
func (edu *ExperienceDataUpdate) SetSentimentScore(f float64) *ExperienceDataUpdate {
	edu.mutation.ResetSentimentScore()
	edu.mutation.SetSentimentScore(f)
	return edu
}

// SetNillableSentimentScore sets the "sentiment_score" field if the given value is not nil.
func (edu *ExperienceDataUpdate) SetNillableSentimentScore(f *float64) *ExperienceDataUpdate {
	if f != nil {
		edu.SetSentimentScore(*f)
	}
	return edu
}

// AddSentimentScore adds f to the "sentiment_score" field.
func (edu *ExperienceDataUpdate) AddSentimentScore(f float64) *ExperienceDataUpdate {
	edu.mutation.AddSentimentScore(f)
	return edu
}

// ClearSentimentScore clears the value of the "sentiment_score" field.
func (edu *ExperienceDataUpdate) ClearSentimentScore() *ExperienceDataUpdate {
	edu.mutation.ClearSentimentScore()
	return edu
}

// SetEmotion sets the "emotion" field.
func (edu *ExperienceDataUpdate) SetEmotion(s string) *ExperienceDataUpdate {
	edu.mutation.SetEmotion(s)
	return edu
}

// SetNillableEmotion sets the "emotion" field if the given value is not nil.
func (edu *ExperienceDataUpdate) SetNillableEmotion(s *string) *ExperienceDataUpdate {
	if s != nil {
		edu.SetEmotion(*s)
	}
	return edu
}

// ClearEmotion clears the value of the "emotion" field.
func (edu *ExperienceDataUpdate) ClearEmotion() *ExperienceDataUpdate {
	edu.mutation.ClearEmotion()
	return edu
}

// SetTopics sets the "topics" field.
func (edu *ExperienceDataUpdate) SetTopics(s []string) *ExperienceDataUpdate {
	edu.mutation.SetTopics(s)
	return edu
}

// AppendTopics appends s to the "topics" field.
func (edu *ExperienceDataUpdate) AppendTopics(s []string) *ExperienceDataUpdate {
	edu.mutation.AppendTopics(s)
	return edu
}

// ClearTopics clears the value of the "topics" field.
func (edu *ExperienceDataUpdate) ClearTopics() *ExperienceDataUpdate {
	edu.mutation.ClearTopics()
	return edu
}

// SetUserIdentifier sets the "user_identifier" field.
func (edu *ExperienceDataUpdate) SetUserIdentifier(s string) *ExperienceDataUpdate {
	edu.mutation.SetUserIdentifier(s)
	return edu
}

// SetNillableUserIdentifier sets the "user_identifier" field if the given value is not nil.
func (edu *ExperienceDataUpdate) SetNillableUserIdentifier(s *string) *ExperienceDataUpdate {
	if s != nil {
		edu.SetUserIdentifier(*s)
	}
	return edu
}

// ClearUserIdentifier clears the value of the "user_identifier" field.
func (edu *ExperienceDataUpdate) ClearUserIdentifier() *ExperienceDataUpdate {
	edu.mutation.ClearUserIdentifier()
	return edu
}

// SetEmbedding sets the "embedding" field.
func (edu *ExperienceDataUpdate) SetEmbedding(pg pgvector.Vector) *ExperienceDataUpdate {
	edu.mutation.SetEmbedding(pg)
	return edu
}

// SetNillableEmbedding sets the "embedding" field if the given value is not nil.
func (edu *ExperienceDataUpdate) SetNillableEmbedding(pg *pgvector.Vector) *ExperienceDataUpdate {
	if pg != nil {
		edu.SetEmbedding(*pg)
	}
	return edu
}

// ClearEmbedding clears the value of the "embedding" field.
func (edu *ExperienceDataUpdate) ClearEmbedding() *ExperienceDataUpdate {
	edu.mutation.ClearEmbedding()
	return edu
}

// SetEmbeddingModel sets the "embedding_model" field.
func (edu *ExperienceDataUpdate) SetEmbeddingModel(s string) *ExperienceDataUpdate {
	edu.mutation.SetEmbeddingModel(s)
	return edu
}

// SetNillableEmbeddingModel sets the "embedding_model" field if the given value is not nil.
func (edu *ExperienceDataUpdate) SetNillableEmbeddingModel(s *string) *ExperienceDataUpdate {
	if s != nil {
		edu.SetEmbeddingModel(*s)
	}
	return edu
}

// ClearEmbeddingModel clears the value of the "embedding_model" field.
func (edu *ExperienceDataUpdate) ClearEmbeddingModel() *ExperienceDataUpdate {
	edu.mutation.ClearEmbeddingModel()
	return edu
}

// Mutation returns the ExperienceDataMutation object of the builder.
func (edu *ExperienceDataUpdate) Mutation() *ExperienceDataMutation {
	return edu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (edu *ExperienceDataUpdate) Save(ctx context.Context) (int, error) {
	edu.defaults()
	return withHooks(ctx, edu.sqlSave, edu.mutation, edu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (edu *ExperienceDataUpdate) SaveX(ctx context.Context) int {
	affected, err := edu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (edu *ExperienceDataUpdate) Exec(ctx context.Context) error {
	_, err := edu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (edu *ExperienceDataUpdate) ExecX(ctx context.Context) {
	if err := edu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (edu *ExperienceDataUpdate) defaults() {
	if _, ok := edu.mutation.UpdatedAt(); !ok {
		v := experiencedata.UpdateDefaultUpdatedAt()
		edu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (edu *ExperienceDataUpdate) check() error {
	if v, ok := edu.mutation.SourceType(); ok {
		if err := experiencedata.SourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "source_type", err: fmt.Errorf(`ent: validator failed for field "ExperienceData.source_type": %w`, err)}
		}
	}
	if v, ok := edu.mutation.FieldID(); ok {
		if err := experiencedata.FieldIDValidator(v); err != nil {
			return &ValidationError{Name: "field_id", err: fmt.Errorf(`ent: validator failed for field "ExperienceData.field_id": %w`, err)}
		}
	}
	if v, ok := edu.mutation.FieldType(); ok {
		if err := experiencedata.FieldTypeValidator(v); err != nil {
			return &ValidationError{Name: "field_type", err: fmt.Errorf(`ent: validator failed for field "ExperienceData.field_type": %w`, err)}
		}
	}
	if v, ok := edu.mutation.Language(); ok {
		if err := experiencedata.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "ExperienceData.language": %w`, err)}
		}
	}
	return nil
}

func (edu *ExperienceDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := edu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(experiencedata.Table, experiencedata.Columns, sqlgraph.NewFieldSpec(experiencedata.FieldID, field.TypeUUID))
	if ps := edu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := edu.mutation.CollectedAt(); ok {
		_spec.SetField(experiencedata.FieldCollectedAt, field.TypeTime, value)
	}
	if value, ok := edu.mutation.UpdatedAt(); ok {
		_spec.SetField(experiencedata.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := edu.mutation.SourceType(); ok {
		_spec.SetField(experiencedata.FieldSourceType, field.TypeString, value)
	}
	if value, ok := edu.mutation.SourceID(); ok {
		_spec.SetField(experiencedata.FieldSourceID, field.TypeString, value)
	}
	if edu.mutation.SourceIDCleared() {
		_spec.ClearField(experiencedata.FieldSourceID, field.TypeString)
	}
	if value, ok := edu.mutation.SourceName(); ok {
		_spec.SetField(experiencedata.FieldSourceName, field.TypeString, value)
	}
	if edu.mutation.SourceNameCleared() {
		_spec.ClearField(experiencedata.FieldSourceName, field.TypeString)
	}
	if value, ok := edu.mutation.FieldID(); ok {
		_spec.SetField(experiencedata.FieldFieldID, field.TypeString, value)
	}
	if value, ok := edu.mutation.FieldLabel(); ok {
		_spec.SetField(experiencedata.FieldFieldLabel, field.TypeString, value)
	}
	if edu.mutation.FieldLabelCleared() {
		_spec.ClearField(experiencedata.FieldFieldLabel, field.TypeString)
	}
	if value, ok := edu.mutation.FieldType(); ok {
		_spec.SetField(experiencedata.FieldFieldType, field.TypeString, value)
	}
	if value, ok := edu.mutation.ValueText(); ok {
		_spec.SetField(experiencedata.FieldValueText, field.TypeString, value)
	}
	if edu.mutation.ValueTextCleared() {
		_spec.ClearField(experiencedata.FieldValueText, field.TypeString)
	}
	if value, ok := edu.mutation.ValueNumber(); ok {
		_spec.SetField(experiencedata.FieldValueNumber, field.TypeFloat64, value)
	}
	if value, ok := edu.mutation.AddedValueNumber(); ok {
		_spec.AddField(experiencedata.FieldValueNumber, field.TypeFloat64, value)
	}
	if edu.mutation.ValueNumberCleared() {
		_spec.ClearField(experiencedata.FieldValueNumber, field.TypeFloat64)
	}
	if value, ok := edu.mutation.ValueBoolean(); ok {
		_spec.SetField(experiencedata.FieldValueBoolean, field.TypeBool, value)
	}
	if edu.mutation.ValueBooleanCleared() {
		_spec.ClearField(experiencedata.FieldValueBoolean, field.TypeBool)
	}
	if value, ok := edu.mutation.ValueDate(); ok {
		_spec.SetField(experiencedata.FieldValueDate, field.TypeTime, value)
	}
	if edu.mutation.ValueDateCleared() {
		_spec.ClearField(experiencedata.FieldValueDate, field.TypeTime)
	}
	if value, ok := edu.mutation.ValueJSON(); ok {
		_spec.SetField(experiencedata.FieldValueJSON, field.TypeJSON, value)
	}
	if edu.mutation.ValueJSONCleared() {
		_spec.ClearField(experiencedata.FieldValueJSON, field.TypeJSON)
	}
	if value, ok := edu.mutation.Metadata(); ok {
		_spec.SetField(experiencedata.FieldMetadata, field.TypeJSON, value)
	}
	if edu.mutation.MetadataCleared() {
		_spec.ClearField(experiencedata.FieldMetadata, field.TypeJSON)
	}
	if value, ok := edu.mutation.Language(); ok {
		_spec.SetField(experiencedata.FieldLanguage, field.TypeString, value)
	}
	if edu.mutation.LanguageCleared() {
		_spec.ClearField(experiencedata.FieldLanguage, field.TypeString)
	}
	if value, ok := edu.mutation.Sentiment(); ok {
		_spec.SetField(experiencedata.FieldSentiment, field.TypeString, value)
	}
	if edu.mutation.SentimentCleared() {
		_spec.ClearField(experiencedata.FieldSentiment, field.TypeString)
	}
	if value, ok := edu.mutation.SentimentScore(); ok {
		_spec.SetField(experiencedata.FieldSentimentScore, field.TypeFloat64, value)
	}
	if value, ok := edu.mutation.AddedSentimentScore(); ok {
		_spec.AddField(experiencedata.FieldSentimentScore, field.TypeFloat64, value)
	}
	if edu.mutation.SentimentScoreCleared() {
		_spec.ClearField(experiencedata.FieldSentimentScore, field.TypeFloat64)
	}
	if value, ok := edu.mutation.Emotion(); ok {
		_spec.SetField(experiencedata.FieldEmotion, field.TypeString, value)
	}
	if edu.mutation.EmotionCleared() {
		_spec.ClearField(experiencedata.FieldEmotion, field.TypeString)
	}
	if value, ok := edu.mutation.Topics(); ok {
		_spec.SetField(experiencedata.FieldTopics, field.TypeJSON, value)
	}
	if value, ok := edu.mutation.AppendedTopics(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, experiencedata.FieldTopics, value)
		})
	}
	if edu.mutation.TopicsCleared() {
		_spec.ClearField(experiencedata.FieldTopics, field.TypeJSON)
	}
	if value, ok := edu.mutation.UserIdentifier(); ok {
		_spec.SetField(experiencedata.FieldUserIdentifier, field.TypeString, value)
	}
	if edu.mutation.UserIdentifierCleared() {
		_spec.ClearField(experiencedata.FieldUserIdentifier, field.TypeString)
	}
	if value, ok := edu.mutation.Embedding(); ok {
		_spec.SetField(experiencedata.FieldEmbedding, field.TypeOther, value)
	}
	if edu.mutation.EmbeddingCleared() {
		_spec.ClearField(experiencedata.FieldEmbedding, field.TypeOther)
	}
	if value, ok := edu.mutation.EmbeddingModel(); ok {
		_spec.SetField(experiencedata.FieldEmbeddingModel, field.TypeString, value)
	}
	if edu.mutation.EmbeddingModelCleared() {
		_spec.ClearField(experiencedata.FieldEmbeddingModel, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, edu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{experiencedata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	edu.mutation.done = true
	return n, nil
}

// ExperienceDataUpdateOne is the builder for updating a single ExperienceData entity.
type ExperienceDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExperienceDataMutation
}

// SetCollectedAt sets the "collected_at" field.
func (eduo *ExperienceDataUpdateOne) SetCollectedAt(t time.Time) *ExperienceDataUpdateOne {
	eduo.mutation.SetCollectedAt(t)
	return eduo
}

// SetNillableCollectedAt sets the "collected_at" field if the given value is not nil.
func (eduo *ExperienceDataUpdateOne) SetNillableCollectedAt(t *time.Time) *ExperienceDataUpdateOne {
	if t != nil {
		eduo.SetCollectedAt(*t)
	}
	return eduo
}

// SetUpdatedAt sets the "updated_at" field.
func (eduo *ExperienceDataUpdateOne) SetUpdatedAt(t time.Time) *ExperienceDataUpdateOne {
	eduo.mutation.SetUpdatedAt(t)
	return eduo
}

// SetSourceType sets the "source_type" field.
func (eduo *ExperienceDataUpdateOne) SetSourceType(s string) *ExperienceDataUpdateOne {
	eduo.mutation.SetSourceType(s)
	return eduo
}

// SetNillableSourceType sets the "source_type" field if the given value is not nil.
func (eduo *ExperienceDataUpdateOne) SetNillableSourceType(s *string) *ExperienceDataUpdateOne {
	if s != nil {
		eduo.SetSourceType(*s)
	}
	return eduo
}

// SetSourceID sets the "source_id" field.
func (eduo *ExperienceDataUpdateOne) SetSourceID(s string) *ExperienceDataUpdateOne {
	eduo.mutation.SetSourceID(s)
	return eduo
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (eduo *ExperienceDataUpdateOne) SetNillableSourceID(s *string) *ExperienceDataUpdateOne {
	if s != nil {
		eduo.SetSourceID(*s)
	}
	return eduo
}

// ClearSourceID clears the value of the "source_id" field.
func (eduo *ExperienceDataUpdateOne) ClearSourceID() *ExperienceDataUpdateOne {
	eduo.mutation.ClearSourceID()
	return eduo
}

// SetSourceName sets the "source_name" field.
func (eduo *ExperienceDataUpdateOne) SetSourceName(s string) *ExperienceDataUpdateOne {
	eduo.mutation.SetSourceName(s)
	return eduo
}

// SetNillableSourceName sets the "source_name" field if the given value is not nil.
func (eduo *ExperienceDataUpdateOne) SetNillableSourceName(s *string) *ExperienceDataUpdateOne {
	if s != nil {
		eduo.SetSourceName(*s)
	}
	return eduo
}

// ClearSourceName clears the value of the "source_name" field.
func (eduo *ExperienceDataUpdateOne) ClearSourceName() *ExperienceDataUpdateOne {
	eduo.mutation.ClearSourceName()
	return eduo
}

// SetFieldID sets the "field_id" field.
func (eduo *ExperienceDataUpdateOne) SetFieldID(s string) *ExperienceDataUpdateOne {
	eduo.mutation.SetFieldID(s)
	return eduo
}

// SetNillableFieldID sets the "field_id" field if the given value is not nil.
func (eduo *ExperienceDataUpdateOne) SetNillableFieldID(s *string) *ExperienceDataUpdateOne {
	if s != nil {
		eduo.SetFieldID(*s)
	}
	return eduo
}

// SetFieldLabel sets the "field_label" field.
func (eduo *ExperienceDataUpdateOne) SetFieldLabel(s string) *ExperienceDataUpdateOne {
	eduo.mutation.SetFieldLabel(s)
	return eduo
}

// SetNillableFieldLabel sets the "field_label" field if the given value is not nil.
func (eduo *ExperienceDataUpdateOne) SetNillableFieldLabel(s *string) *ExperienceDataUpdateOne {
	if s != nil {
		eduo.SetFieldLabel(*s)
	}
	return eduo
}

// ClearFieldLabel clears the value of the "field_label" field.
func (eduo *ExperienceDataUpdateOne) ClearFieldLabel() *ExperienceDataUpdateOne {
	eduo.mutation.ClearFieldLabel()
	return eduo
}

// SetFieldType sets the "field_type" field.
func (eduo *ExperienceDataUpdateOne) SetFieldType(s string) *ExperienceDataUpdateOne {
	eduo.mutation.SetFieldType(s)
	return eduo
}

// SetNillableFieldType sets the "field_type" field if the given value is not nil.
func (eduo *ExperienceDataUpdateOne) SetNillableFieldType(s *string) *ExperienceDataUpdateOne {
	if s != nil {
		eduo.SetFieldType(*s)
	}
	return eduo
}

// SetValueText sets the "value_text" field.
func (eduo *ExperienceDataUpdateOne) SetValueText(s string) *ExperienceDataUpdateOne {
	eduo.mutation.SetValueText(s)
	return eduo
}

// SetNillableValueText sets the "value_text" field if the given value is not nil.
func (eduo *ExperienceDataUpdateOne) SetNillableValueText(s *string) *ExperienceDataUpdateOne {
	if s != nil {
		eduo.SetValueText(*s)
	}
	return eduo
}

// ClearValueText clears the value of the "value_text" field.
func (eduo *ExperienceDataUpdateOne) ClearValueText() *ExperienceDataUpdateOne {
	eduo.mutation.ClearValueText()
	return eduo
}

// SetValueNumber sets the "value_number" field.
func (eduo *ExperienceDataUpdateOne) SetValueNumber(f float64) *ExperienceDataUpdateOne {
	eduo.mutation.ResetValueNumber()
	eduo.mutation.SetValueNumber(f)
	return eduo
}

// SetNillableValueNumber sets the "value_number" field if the given value is not nil.
func (eduo *ExperienceDataUpdateOne) SetNillableValueNumber(f *float64) *ExperienceDataUpdateOne {
	if f != nil {
		eduo.SetValueNumber(*f)
	}
	return eduo
}

// AddValueNumber adds f to the "value_number" field.
func (eduo *ExperienceDataUpdateOne) AddValueNumber(f float64) *ExperienceDataUpdateOne {
	eduo.mutation.AddValueNumber(f)
	return eduo
}

// ClearValueNumber clears the value of the "value_number" field.
func (eduo *ExperienceDataUpdateOne) ClearValueNumber() *ExperienceDataUpdateOne {
	eduo.mutation.ClearValueNumber()
	return eduo
}

// SetValueBoolean sets the "value_boolean" field.
func (eduo *ExperienceDataUpdateOne) SetValueBoolean(b bool) *ExperienceDataUpdateOne {
	eduo.mutation.SetValueBoolean(b)
	return eduo
}

// SetNillableValueBoolean sets the "value_boolean" field if the given value is not nil.
func (eduo *ExperienceDataUpdateOne) SetNillableValueBoolean(b *bool) *ExperienceDataUpdateOne {
	if b != nil {
		eduo.SetValueBoolean(*b)
	}
	return eduo
}

// ClearValueBoolean clears the value of the "value_boolean" field.
func (eduo *ExperienceDataUpdateOne) ClearValueBoolean() *ExperienceDataUpdateOne {
	eduo.mutation.ClearValueBoolean()
	return eduo
}

// SetValueDate sets the "value_date" field.
func (eduo *ExperienceDataUpdateOne) SetValueDate(t time.Time) *ExperienceDataUpdateOne {
	eduo.mutation.SetValueDate(t)
	return eduo
}

// SetNillableValueDate sets the "value_date" field if the given value is not nil.
func (eduo *ExperienceDataUpdateOne) SetNillableValueDate(t *time.Time) *ExperienceDataUpdateOne {
	if t != nil {
		eduo.SetValueDate(*t)
	}
	return eduo
}

// ClearValueDate clears the value of the "value_date" field.
func (eduo *ExperienceDataUpdateOne) ClearValueDate() *ExperienceDataUpdateOne {
	eduo.mutation.ClearValueDate()
	return eduo
}

// SetValueJSON sets the "value_json" field.
func (eduo *ExperienceDataUpdateOne) SetValueJSON(m map[string]interface{}) *ExperienceDataUpdateOne {
	eduo.mutation.SetValueJSON(m)
	return eduo
}

// ClearValueJSON clears the value of the "value_json" field.
func (eduo *ExperienceDataUpdateOne) ClearValueJSON() *ExperienceDataUpdateOne {
	eduo.mutation.ClearValueJSON()
	return eduo
}

// SetMetadata sets the "metadata" field.
func (eduo *ExperienceDataUpdateOne) SetMetadata(m map[string]interface{}) *ExperienceDataUpdateOne {
	eduo.mutation.SetMetadata(m)
	return eduo
}

// ClearMetadata clears the value of the "metadata" field.
func (eduo *ExperienceDataUpdateOne) ClearMetadata() *ExperienceDataUpdateOne {
	eduo.mutation.ClearMetadata()
	return eduo
}

// SetLanguage sets the "language" field.
func (eduo *ExperienceDataUpdateOne) SetLanguage(s string) *ExperienceDataUpdateOne {
	eduo.mutation.SetLanguage(s)
	return eduo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (eduo *ExperienceDataUpdateOne) SetNillableLanguage(s *string) *ExperienceDataUpdateOne {
	if s != nil {
		eduo.SetLanguage(*s)
	}
	return eduo
}

// ClearLanguage clears the value of the "language" field.
func (eduo *ExperienceDataUpdateOne) ClearLanguage() *ExperienceDataUpdateOne {
	eduo.mutation.ClearLanguage()
	return eduo
}

// SetSentiment sets the "sentiment" field.
func (eduo *ExperienceDataUpdateOne) SetSentiment(s string) *ExperienceDataUpdateOne {
	eduo.mutation.SetSentiment(s)
	return eduo
}

// SetNillableSentiment sets the "sentiment" field if the given value is not nil.
func (eduo *ExperienceDataUpdateOne) SetNillableSentiment(s *string) *ExperienceDataUpdateOne {
	if s != nil {
		eduo.SetSentiment(*s)
	}
	return eduo
}

// ClearSentiment clears the value of the "sentiment" field.
func (eduo *ExperienceDataUpdateOne) ClearSentiment() *ExperienceDataUpdateOne {
	eduo.mutation.ClearSentiment()
	return eduo
}

// SetSentimentScore sets the "sentiment_score" field.
func (eduo *ExperienceDataUpdateOne) SetSentimentScore(f float64) *ExperienceDataUpdateOne {
	eduo.mutation.ResetSentimentScore()
	eduo.mutation.SetSentimentScore(f)
	return eduo
}

// SetNillableSentimentScore sets the "sentiment_score" field if the given value is not nil.
func (eduo *ExperienceDataUpdateOne) SetNillableSentimentScore(f *float64) *ExperienceDataUpdateOne {
	if f != nil {
		eduo.SetSentimentScore(*f)
	}
	return eduo
}

// AddSentimentScore adds f to the "sentiment_score" field.
func (eduo *ExperienceDataUpdateOne) AddSentimentScore(f float64) *ExperienceDataUpdateOne {
	eduo.mutation.AddSentimentScore(f)
	return eduo
}

// ClearSentimentScore clears the value of the "sentiment_score" field.
func (eduo *ExperienceDataUpdateOne) ClearSentimentScore() *ExperienceDataUpdateOne {
	eduo.mutation.ClearSentimentScore()
	return eduo
}

// SetEmotion sets the "emotion" field.
func (eduo *ExperienceDataUpdateOne) SetEmotion(s string) *ExperienceDataUpdateOne {
	eduo.mutation.SetEmotion(s)
	return eduo
}

// SetNillableEmotion sets the "emotion" field if the given value is not nil.
func (eduo *ExperienceDataUpdateOne) SetNillableEmotion(s *string) *ExperienceDataUpdateOne {
	if s != nil {
		eduo.SetEmotion(*s)
	}
	return eduo
}

// ClearEmotion clears the value of the "emotion" field.
func (eduo *ExperienceDataUpdateOne) ClearEmotion() *ExperienceDataUpdateOne {
	eduo.mutation.ClearEmotion()
	return eduo
}

// SetTopics sets the "topics" field.
func (eduo *ExperienceDataUpdateOne) SetTopics(s []string) *ExperienceDataUpdateOne {
	eduo.mutation.SetTopics(s)
	return eduo
}

// AppendTopics appends s to the "topics" field.
func (eduo *ExperienceDataUpdateOne) AppendTopics(s []string) *ExperienceDataUpdateOne {
	eduo.mutation.AppendTopics(s)
	return eduo
}

// ClearTopics clears the value of the "topics" field.
func (eduo *ExperienceDataUpdateOne) ClearTopics() *ExperienceDataUpdateOne {
	eduo.mutation.ClearTopics()
	return eduo
}

// SetUserIdentifier sets the "user_identifier" field.
func (eduo *ExperienceDataUpdateOne) SetUserIdentifier(s string) *ExperienceDataUpdateOne {
	eduo.mutation.SetUserIdentifier(s)
	return eduo
}

// SetNillableUserIdentifier sets the "user_identifier" field if the given value is not nil.
func (eduo *ExperienceDataUpdateOne) SetNillableUserIdentifier(s *string) *ExperienceDataUpdateOne {
	if s != nil {
		eduo.SetUserIdentifier(*s)
	}
	return eduo
}

// ClearUserIdentifier clears the value of the "user_identifier" field.
func (eduo *ExperienceDataUpdateOne) ClearUserIdentifier() *ExperienceDataUpdateOne {
	eduo.mutation.ClearUserIdentifier()
	return eduo
}

// SetEmbedding sets the "embedding" field.
func (eduo *ExperienceDataUpdateOne) SetEmbedding(pg pgvector.Vector) *ExperienceDataUpdateOne {
	eduo.mutation.SetEmbedding(pg)
	return eduo
}

// SetNillableEmbedding sets the "embedding" field if the given value is not nil.
func (eduo *ExperienceDataUpdateOne) SetNillableEmbedding(pg *pgvector.Vector) *ExperienceDataUpdateOne {
	if pg != nil {
		eduo.SetEmbedding(*pg)
	}
	return eduo
}

// ClearEmbedding clears the value of the "embedding" field.
func (eduo *ExperienceDataUpdateOne) ClearEmbedding() *ExperienceDataUpdateOne {
	eduo.mutation.ClearEmbedding()
	return eduo
}

// SetEmbeddingModel sets the "embedding_model" field.
func (eduo *ExperienceDataUpdateOne) SetEmbeddingModel(s string) *ExperienceDataUpdateOne {
	eduo.mutation.SetEmbeddingModel(s)
	return eduo
}

// SetNillableEmbeddingModel sets the "embedding_model" field if the given value is not nil.
func (eduo *ExperienceDataUpdateOne) SetNillableEmbeddingModel(s *string) *ExperienceDataUpdateOne {
	if s != nil {
		eduo.SetEmbeddingModel(*s)
	}
	return eduo
}

// ClearEmbeddingModel clears the value of the "embedding_model" field.
func (eduo *ExperienceDataUpdateOne) ClearEmbeddingModel() *ExperienceDataUpdateOne {
	eduo.mutation.ClearEmbeddingModel()
	return eduo
}

// Mutation returns the ExperienceDataMutation object of the builder.
func (eduo *ExperienceDataUpdateOne) Mutation() *ExperienceDataMutation {
	return eduo.mutation
}

// Where appends a list predicates to the ExperienceDataUpdate builder.
func (eduo *ExperienceDataUpdateOne) Where(ps ...predicate.ExperienceData) *ExperienceDataUpdateOne {
	eduo.mutation.Where(ps...)
	return eduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eduo *ExperienceDataUpdateOne) Select(field string, fields ...string) *ExperienceDataUpdateOne {
	eduo.fields = append([]string{field}, fields...)
	return eduo
}

// Save executes the query and returns the updated ExperienceData entity.
func (eduo *ExperienceDataUpdateOne) Save(ctx context.Context) (*ExperienceData, error) {
	eduo.defaults()
	return withHooks(ctx, eduo.sqlSave, eduo.mutation, eduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eduo *ExperienceDataUpdateOne) SaveX(ctx context.Context) *ExperienceData {
	node, err := eduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eduo *ExperienceDataUpdateOne) Exec(ctx context.Context) error {
	_, err := eduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eduo *ExperienceDataUpdateOne) ExecX(ctx context.Context) {
	if err := eduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eduo *ExperienceDataUpdateOne) defaults() {
	if _, ok := eduo.mutation.UpdatedAt(); !ok {
		v := experiencedata.UpdateDefaultUpdatedAt()
		eduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eduo *ExperienceDataUpdateOne) check() error {
	if v, ok := eduo.mutation.SourceType(); ok {
		if err := experiencedata.SourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "source_type", err: fmt.Errorf(`ent: validator failed for field "ExperienceData.source_type": %w`, err)}
		}
	}
	if v, ok := eduo.mutation.FieldID(); ok {
		if err := experiencedata.FieldIDValidator(v); err != nil {
			return &ValidationError{Name: "field_id", err: fmt.Errorf(`ent: validator failed for field "ExperienceData.field_id": %w`, err)}
		}
	}
	if v, ok := eduo.mutation.FieldType(); ok {
		if err := experiencedata.FieldTypeValidator(v); err != nil {
			return &ValidationError{Name: "field_type", err: fmt.Errorf(`ent: validator failed for field "ExperienceData.field_type": %w`, err)}
		}
	}
	if v, ok := eduo.mutation.Language(); ok {
		if err := experiencedata.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "ExperienceData.language": %w`, err)}
		}
	}
	return nil
}

func (eduo *ExperienceDataUpdateOne) sqlSave(ctx context.Context) (_node *ExperienceData, err error) {
	if err := eduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(experiencedata.Table, experiencedata.Columns, sqlgraph.NewFieldSpec(experiencedata.FieldID, field.TypeUUID))
	id, ok := eduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExperienceData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, experiencedata.FieldID)
		for _, f := range fields {
			if !experiencedata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != experiencedata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eduo.mutation.CollectedAt(); ok {
		_spec.SetField(experiencedata.FieldCollectedAt, field.TypeTime, value)
	}
	if value, ok := eduo.mutation.UpdatedAt(); ok {
		_spec.SetField(experiencedata.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eduo.mutation.SourceType(); ok {
		_spec.SetField(experiencedata.FieldSourceType, field.TypeString, value)
	}
	if value, ok := eduo.mutation.SourceID(); ok {
		_spec.SetField(experiencedata.FieldSourceID, field.TypeString, value)
	}
	if eduo.mutation.SourceIDCleared() {
		_spec.ClearField(experiencedata.FieldSourceID, field.TypeString)
	}
	if value, ok := eduo.mutation.SourceName(); ok {
		_spec.SetField(experiencedata.FieldSourceName, field.TypeString, value)
	}
	if eduo.mutation.SourceNameCleared() {
		_spec.ClearField(experiencedata.FieldSourceName, field.TypeString)
	}
	if value, ok := eduo.mutation.FieldID(); ok {
		_spec.SetField(experiencedata.FieldFieldID, field.TypeString, value)
	}
	if value, ok := eduo.mutation.FieldLabel(); ok {
		_spec.SetField(experiencedata.FieldFieldLabel, field.TypeString, value)
	}
	if eduo.mutation.FieldLabelCleared() {
		_spec.ClearField(experiencedata.FieldFieldLabel, field.TypeString)
	}
	if value, ok := eduo.mutation.FieldType(); ok {
		_spec.SetField(experiencedata.FieldFieldType, field.TypeString, value)
	}
	if value, ok := eduo.mutation.ValueText(); ok {
		_spec.SetField(experiencedata.FieldValueText, field.TypeString, value)
	}
	if eduo.mutation.ValueTextCleared() {
		_spec.ClearField(experiencedata.FieldValueText, field.TypeString)
	}
	if value, ok := eduo.mutation.ValueNumber(); ok {
		_spec.SetField(experiencedata.FieldValueNumber, field.TypeFloat64, value)
	}
	if value, ok := eduo.mutation.AddedValueNumber(); ok {
		_spec.AddField(experiencedata.FieldValueNumber, field.TypeFloat64, value)
	}
	if eduo.mutation.ValueNumberCleared() {
		_spec.ClearField(experiencedata.FieldValueNumber, field.TypeFloat64)
	}
	if value, ok := eduo.mutation.ValueBoolean(); ok {
		_spec.SetField(experiencedata.FieldValueBoolean, field.TypeBool, value)
	}
	if eduo.mutation.ValueBooleanCleared() {
		_spec.ClearField(experiencedata.FieldValueBoolean, field.TypeBool)
	}
	if value, ok := eduo.mutation.ValueDate(); ok {
		_spec.SetField(experiencedata.FieldValueDate, field.TypeTime, value)
	}
	if eduo.mutation.ValueDateCleared() {
		_spec.ClearField(experiencedata.FieldValueDate, field.TypeTime)
	}
	if value, ok := eduo.mutation.ValueJSON(); ok {
		_spec.SetField(experiencedata.FieldValueJSON, field.TypeJSON, value)
	}
	if eduo.mutation.ValueJSONCleared() {
		_spec.ClearField(experiencedata.FieldValueJSON, field.TypeJSON)
	}
	if value, ok := eduo.mutation.Metadata(); ok {
		_spec.SetField(experiencedata.FieldMetadata, field.TypeJSON, value)
	}
	if eduo.mutation.MetadataCleared() {
		_spec.ClearField(experiencedata.FieldMetadata, field.TypeJSON)
	}
	if value, ok := eduo.mutation.Language(); ok {
		_spec.SetField(experiencedata.FieldLanguage, field.TypeString, value)
	}
	if eduo.mutation.LanguageCleared() {
		_spec.ClearField(experiencedata.FieldLanguage, field.TypeString)
	}
	if value, ok := eduo.mutation.Sentiment(); ok {
		_spec.SetField(experiencedata.FieldSentiment, field.TypeString, value)
	}
	if eduo.mutation.SentimentCleared() {
		_spec.ClearField(experiencedata.FieldSentiment, field.TypeString)
	}
	if value, ok := eduo.mutation.SentimentScore(); ok {
		_spec.SetField(experiencedata.FieldSentimentScore, field.TypeFloat64, value)
	}
	if value, ok := eduo.mutation.AddedSentimentScore(); ok {
		_spec.AddField(experiencedata.FieldSentimentScore, field.TypeFloat64, value)
	}
	if eduo.mutation.SentimentScoreCleared() {
		_spec.ClearField(experiencedata.FieldSentimentScore, field.TypeFloat64)
	}
	if value, ok := eduo.mutation.Emotion(); ok {
		_spec.SetField(experiencedata.FieldEmotion, field.TypeString, value)
	}
	if eduo.mutation.EmotionCleared() {
		_spec.ClearField(experiencedata.FieldEmotion, field.TypeString)
	}
	if value, ok := eduo.mutation.Topics(); ok {
		_spec.SetField(experiencedata.FieldTopics, field.TypeJSON, value)
	}
	if value, ok := eduo.mutation.AppendedTopics(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, experiencedata.FieldTopics, value)
		})
	}
	if eduo.mutation.TopicsCleared() {
		_spec.ClearField(experiencedata.FieldTopics, field.TypeJSON)
	}
	if value, ok := eduo.mutation.UserIdentifier(); ok {
		_spec.SetField(experiencedata.FieldUserIdentifier, field.TypeString, value)
	}
	if eduo.mutation.UserIdentifierCleared() {
		_spec.ClearField(experiencedata.FieldUserIdentifier, field.TypeString)
	}
	if value, ok := eduo.mutation.Embedding(); ok {
		_spec.SetField(experiencedata.FieldEmbedding, field.TypeOther, value)
	}
	if eduo.mutation.EmbeddingCleared() {
		_spec.ClearField(experiencedata.FieldEmbedding, field.TypeOther)
	}
	if value, ok := eduo.mutation.EmbeddingModel(); ok {
		_spec.SetField(experiencedata.FieldEmbeddingModel, field.TypeString, value)
	}
	if eduo.mutation.EmbeddingModelCleared() {
		_spec.ClearField(experiencedata.FieldEmbeddingModel, field.TypeString)
	}
	_node = &ExperienceData{config: eduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{experiencedata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eduo.mutation.done = true
	return _node, nil
}
