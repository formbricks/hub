// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/formbricks/formbricks-rewrite/apps/hub/internal/ent/enrichmentjob"
	"github.com/formbricks/formbricks-rewrite/apps/hub/internal/ent/predicate"
)

// EnrichmentJobDelete is the builder for deleting a EnrichmentJob entity.
type EnrichmentJobDelete struct {
	config
	hooks    []Hook
	mutation *EnrichmentJobMutation
}

// Where appends a list predicates to the EnrichmentJobDelete builder.
func (ejd *EnrichmentJobDelete) Where(ps ...predicate.EnrichmentJob) *EnrichmentJobDelete {
	ejd.mutation.Where(ps...)
	return ejd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ejd *EnrichmentJobDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ejd.sqlExec, ejd.mutation, ejd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ejd *EnrichmentJobDelete) ExecX(ctx context.Context) int {
	n, err := ejd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ejd *EnrichmentJobDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(enrichmentjob.Table, sqlgraph.NewFieldSpec(enrichmentjob.FieldID, field.TypeUUID))
	if ps := ejd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ejd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ejd.mutation.done = true
	return affected, err
}

// EnrichmentJobDeleteOne is the builder for deleting a single EnrichmentJob entity.
type EnrichmentJobDeleteOne struct {
	ejd *EnrichmentJobDelete
}

// Where appends a list predicates to the EnrichmentJobDelete builder.
func (ejdo *EnrichmentJobDeleteOne) Where(ps ...predicate.EnrichmentJob) *EnrichmentJobDeleteOne {
	ejdo.ejd.mutation.Where(ps...)
	return ejdo
}

// Exec executes the deletion query.
func (ejdo *EnrichmentJobDeleteOne) Exec(ctx context.Context) error {
	n, err := ejdo.ejd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{enrichmentjob.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ejdo *EnrichmentJobDeleteOne) ExecX(ctx context.Context) {
	if err := ejdo.Exec(ctx); err != nil {
		panic(err)
	}
}
