// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/formbricks/formbricks-rewrite/apps/hub/internal/ent/migrate"
	"github.com/google/uuid"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/formbricks/formbricks-rewrite/apps/hub/internal/ent/enrichmentjob"
	"github.com/formbricks/formbricks-rewrite/apps/hub/internal/ent/experiencedata"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// EnrichmentJob is the client for interacting with the EnrichmentJob builders.
	EnrichmentJob *EnrichmentJobClient
	// ExperienceData is the client for interacting with the ExperienceData builders.
	ExperienceData *ExperienceDataClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.EnrichmentJob = NewEnrichmentJobClient(c.config)
	c.ExperienceData = NewExperienceDataClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		EnrichmentJob:  NewEnrichmentJobClient(cfg),
		ExperienceData: NewExperienceDataClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		EnrichmentJob:  NewEnrichmentJobClient(cfg),
		ExperienceData: NewExperienceDataClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		EnrichmentJob.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.EnrichmentJob.Use(hooks...)
	c.ExperienceData.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.EnrichmentJob.Intercept(interceptors...)
	c.ExperienceData.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *EnrichmentJobMutation:
		return c.EnrichmentJob.mutate(ctx, m)
	case *ExperienceDataMutation:
		return c.ExperienceData.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// EnrichmentJobClient is a client for the EnrichmentJob schema.
type EnrichmentJobClient struct {
	config
}

// NewEnrichmentJobClient returns a client for the EnrichmentJob from the given config.
func NewEnrichmentJobClient(c config) *EnrichmentJobClient {
	return &EnrichmentJobClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `enrichmentjob.Hooks(f(g(h())))`.
func (c *EnrichmentJobClient) Use(hooks ...Hook) {
	c.hooks.EnrichmentJob = append(c.hooks.EnrichmentJob, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `enrichmentjob.Intercept(f(g(h())))`.
func (c *EnrichmentJobClient) Intercept(interceptors ...Interceptor) {
	c.inters.EnrichmentJob = append(c.inters.EnrichmentJob, interceptors...)
}

// Create returns a builder for creating a EnrichmentJob entity.
func (c *EnrichmentJobClient) Create() *EnrichmentJobCreate {
	mutation := newEnrichmentJobMutation(c.config, OpCreate)
	return &EnrichmentJobCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EnrichmentJob entities.
func (c *EnrichmentJobClient) CreateBulk(builders ...*EnrichmentJobCreate) *EnrichmentJobCreateBulk {
	return &EnrichmentJobCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EnrichmentJobClient) MapCreateBulk(slice any, setFunc func(*EnrichmentJobCreate, int)) *EnrichmentJobCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EnrichmentJobCreateBulk{err: fmt.Errorf("calling to EnrichmentJobClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EnrichmentJobCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EnrichmentJobCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EnrichmentJob.
func (c *EnrichmentJobClient) Update() *EnrichmentJobUpdate {
	mutation := newEnrichmentJobMutation(c.config, OpUpdate)
	return &EnrichmentJobUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EnrichmentJobClient) UpdateOne(ej *EnrichmentJob) *EnrichmentJobUpdateOne {
	mutation := newEnrichmentJobMutation(c.config, OpUpdateOne, withEnrichmentJob(ej))
	return &EnrichmentJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EnrichmentJobClient) UpdateOneID(id uuid.UUID) *EnrichmentJobUpdateOne {
	mutation := newEnrichmentJobMutation(c.config, OpUpdateOne, withEnrichmentJobID(id))
	return &EnrichmentJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EnrichmentJob.
func (c *EnrichmentJobClient) Delete() *EnrichmentJobDelete {
	mutation := newEnrichmentJobMutation(c.config, OpDelete)
	return &EnrichmentJobDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EnrichmentJobClient) DeleteOne(ej *EnrichmentJob) *EnrichmentJobDeleteOne {
	return c.DeleteOneID(ej.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EnrichmentJobClient) DeleteOneID(id uuid.UUID) *EnrichmentJobDeleteOne {
	builder := c.Delete().Where(enrichmentjob.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EnrichmentJobDeleteOne{builder}
}

// Query returns a query builder for EnrichmentJob.
func (c *EnrichmentJobClient) Query() *EnrichmentJobQuery {
	return &EnrichmentJobQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEnrichmentJob},
		inters: c.Interceptors(),
	}
}

// Get returns a EnrichmentJob entity by its id.
func (c *EnrichmentJobClient) Get(ctx context.Context, id uuid.UUID) (*EnrichmentJob, error) {
	return c.Query().Where(enrichmentjob.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EnrichmentJobClient) GetX(ctx context.Context, id uuid.UUID) *EnrichmentJob {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExperience queries the experience edge of a EnrichmentJob.
func (c *EnrichmentJobClient) QueryExperience(ej *EnrichmentJob) *ExperienceDataQuery {
	query := (&ExperienceDataClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ej.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enrichmentjob.Table, enrichmentjob.FieldID, id),
			sqlgraph.To(experiencedata.Table, experiencedata.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enrichmentjob.ExperienceTable, enrichmentjob.ExperienceColumn),
		)
		fromV = sqlgraph.Neighbors(ej.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EnrichmentJobClient) Hooks() []Hook {
	return c.hooks.EnrichmentJob
}

// Interceptors returns the client interceptors.
func (c *EnrichmentJobClient) Interceptors() []Interceptor {
	return c.inters.EnrichmentJob
}

func (c *EnrichmentJobClient) mutate(ctx context.Context, m *EnrichmentJobMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EnrichmentJobCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EnrichmentJobUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EnrichmentJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EnrichmentJobDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EnrichmentJob mutation op: %q", m.Op())
	}
}

// ExperienceDataClient is a client for the ExperienceData schema.
type ExperienceDataClient struct {
	config
}

// NewExperienceDataClient returns a client for the ExperienceData from the given config.
func NewExperienceDataClient(c config) *ExperienceDataClient {
	return &ExperienceDataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `experiencedata.Hooks(f(g(h())))`.
func (c *ExperienceDataClient) Use(hooks ...Hook) {
	c.hooks.ExperienceData = append(c.hooks.ExperienceData, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `experiencedata.Intercept(f(g(h())))`.
func (c *ExperienceDataClient) Intercept(interceptors ...Interceptor) {
	c.inters.ExperienceData = append(c.inters.ExperienceData, interceptors...)
}

// Create returns a builder for creating a ExperienceData entity.
func (c *ExperienceDataClient) Create() *ExperienceDataCreate {
	mutation := newExperienceDataMutation(c.config, OpCreate)
	return &ExperienceDataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExperienceData entities.
func (c *ExperienceDataClient) CreateBulk(builders ...*ExperienceDataCreate) *ExperienceDataCreateBulk {
	return &ExperienceDataCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ExperienceDataClient) MapCreateBulk(slice any, setFunc func(*ExperienceDataCreate, int)) *ExperienceDataCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ExperienceDataCreateBulk{err: fmt.Errorf("calling to ExperienceDataClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ExperienceDataCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ExperienceDataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExperienceData.
func (c *ExperienceDataClient) Update() *ExperienceDataUpdate {
	mutation := newExperienceDataMutation(c.config, OpUpdate)
	return &ExperienceDataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExperienceDataClient) UpdateOne(ed *ExperienceData) *ExperienceDataUpdateOne {
	mutation := newExperienceDataMutation(c.config, OpUpdateOne, withExperienceData(ed))
	return &ExperienceDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExperienceDataClient) UpdateOneID(id uuid.UUID) *ExperienceDataUpdateOne {
	mutation := newExperienceDataMutation(c.config, OpUpdateOne, withExperienceDataID(id))
	return &ExperienceDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExperienceData.
func (c *ExperienceDataClient) Delete() *ExperienceDataDelete {
	mutation := newExperienceDataMutation(c.config, OpDelete)
	return &ExperienceDataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExperienceDataClient) DeleteOne(ed *ExperienceData) *ExperienceDataDeleteOne {
	return c.DeleteOneID(ed.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExperienceDataClient) DeleteOneID(id uuid.UUID) *ExperienceDataDeleteOne {
	builder := c.Delete().Where(experiencedata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExperienceDataDeleteOne{builder}
}

// Query returns a query builder for ExperienceData.
func (c *ExperienceDataClient) Query() *ExperienceDataQuery {
	return &ExperienceDataQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExperienceData},
		inters: c.Interceptors(),
	}
}

// Get returns a ExperienceData entity by its id.
func (c *ExperienceDataClient) Get(ctx context.Context, id uuid.UUID) (*ExperienceData, error) {
	return c.Query().Where(experiencedata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExperienceDataClient) GetX(ctx context.Context, id uuid.UUID) *ExperienceData {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ExperienceDataClient) Hooks() []Hook {
	return c.hooks.ExperienceData
}

// Interceptors returns the client interceptors.
func (c *ExperienceDataClient) Interceptors() []Interceptor {
	return c.inters.ExperienceData
}

func (c *ExperienceDataClient) mutate(ctx context.Context, m *ExperienceDataMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExperienceDataCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExperienceDataUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExperienceDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExperienceDataDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ExperienceData mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		EnrichmentJob, ExperienceData []ent.Hook
	}
	inters struct {
		EnrichmentJob, ExperienceData []ent.Interceptor
	}
)
