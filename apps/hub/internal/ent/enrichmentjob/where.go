// Code generated by ent, DO NOT EDIT.

package enrichmentjob

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/formbricks/formbricks-rewrite/apps/hub/internal/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldLTE(FieldID, id))
}

// ExperienceID applies equality check predicate on the "experience_id" field. It's identical to ExperienceIDEQ.
func ExperienceID(v uuid.UUID) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldEQ(FieldExperienceID, v))
}

// JobType applies equality check predicate on the "job_type" field. It's identical to JobTypeEQ.
func JobType(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldEQ(FieldJobType, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldEQ(FieldStatus, v))
}

// Text applies equality check predicate on the "text" field. It's identical to TextEQ.
func Text(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldEQ(FieldText, v))
}

// Error applies equality check predicate on the "error" field. It's identical to ErrorEQ.
func Error(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldEQ(FieldError, v))
}

// Attempts applies equality check predicate on the "attempts" field. It's identical to AttemptsEQ.
func Attempts(v int) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldEQ(FieldAttempts, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldEQ(FieldCreatedAt, v))
}

// ProcessedAt applies equality check predicate on the "processed_at" field. It's identical to ProcessedAtEQ.
func ProcessedAt(v time.Time) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldEQ(FieldProcessedAt, v))
}

// ExperienceIDEQ applies the EQ predicate on the "experience_id" field.
func ExperienceIDEQ(v uuid.UUID) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldEQ(FieldExperienceID, v))
}

// ExperienceIDNEQ applies the NEQ predicate on the "experience_id" field.
func ExperienceIDNEQ(v uuid.UUID) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldNEQ(FieldExperienceID, v))
}

// ExperienceIDIn applies the In predicate on the "experience_id" field.
func ExperienceIDIn(vs ...uuid.UUID) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldIn(FieldExperienceID, vs...))
}

// ExperienceIDNotIn applies the NotIn predicate on the "experience_id" field.
func ExperienceIDNotIn(vs ...uuid.UUID) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldNotIn(FieldExperienceID, vs...))
}

// JobTypeEQ applies the EQ predicate on the "job_type" field.
func JobTypeEQ(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldEQ(FieldJobType, v))
}

// JobTypeNEQ applies the NEQ predicate on the "job_type" field.
func JobTypeNEQ(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldNEQ(FieldJobType, v))
}

// JobTypeIn applies the In predicate on the "job_type" field.
func JobTypeIn(vs ...string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldIn(FieldJobType, vs...))
}

// JobTypeNotIn applies the NotIn predicate on the "job_type" field.
func JobTypeNotIn(vs ...string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldNotIn(FieldJobType, vs...))
}

// JobTypeGT applies the GT predicate on the "job_type" field.
func JobTypeGT(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldGT(FieldJobType, v))
}

// JobTypeGTE applies the GTE predicate on the "job_type" field.
func JobTypeGTE(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldGTE(FieldJobType, v))
}

// JobTypeLT applies the LT predicate on the "job_type" field.
func JobTypeLT(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldLT(FieldJobType, v))
}

// JobTypeLTE applies the LTE predicate on the "job_type" field.
func JobTypeLTE(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldLTE(FieldJobType, v))
}

// JobTypeContains applies the Contains predicate on the "job_type" field.
func JobTypeContains(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldContains(FieldJobType, v))
}

// JobTypeHasPrefix applies the HasPrefix predicate on the "job_type" field.
func JobTypeHasPrefix(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldHasPrefix(FieldJobType, v))
}

// JobTypeHasSuffix applies the HasSuffix predicate on the "job_type" field.
func JobTypeHasSuffix(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldHasSuffix(FieldJobType, v))
}

// JobTypeEqualFold applies the EqualFold predicate on the "job_type" field.
func JobTypeEqualFold(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldEqualFold(FieldJobType, v))
}

// JobTypeContainsFold applies the ContainsFold predicate on the "job_type" field.
func JobTypeContainsFold(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldContainsFold(FieldJobType, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldContainsFold(FieldStatus, v))
}

// TextEQ applies the EQ predicate on the "text" field.
func TextEQ(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldEQ(FieldText, v))
}

// TextNEQ applies the NEQ predicate on the "text" field.
func TextNEQ(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldNEQ(FieldText, v))
}

// TextIn applies the In predicate on the "text" field.
func TextIn(vs ...string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldIn(FieldText, vs...))
}

// TextNotIn applies the NotIn predicate on the "text" field.
func TextNotIn(vs ...string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldNotIn(FieldText, vs...))
}

// TextGT applies the GT predicate on the "text" field.
func TextGT(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldGT(FieldText, v))
}

// TextGTE applies the GTE predicate on the "text" field.
func TextGTE(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldGTE(FieldText, v))
}

// TextLT applies the LT predicate on the "text" field.
func TextLT(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldLT(FieldText, v))
}

// TextLTE applies the LTE predicate on the "text" field.
func TextLTE(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldLTE(FieldText, v))
}

// TextContains applies the Contains predicate on the "text" field.
func TextContains(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldContains(FieldText, v))
}

// TextHasPrefix applies the HasPrefix predicate on the "text" field.
func TextHasPrefix(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldHasPrefix(FieldText, v))
}

// TextHasSuffix applies the HasSuffix predicate on the "text" field.
func TextHasSuffix(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldHasSuffix(FieldText, v))
}

// TextEqualFold applies the EqualFold predicate on the "text" field.
func TextEqualFold(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldEqualFold(FieldText, v))
}

// TextContainsFold applies the ContainsFold predicate on the "text" field.
func TextContainsFold(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldContainsFold(FieldText, v))
}

// ErrorEQ applies the EQ predicate on the "error" field.
func ErrorEQ(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldEQ(FieldError, v))
}

// ErrorNEQ applies the NEQ predicate on the "error" field.
func ErrorNEQ(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldNEQ(FieldError, v))
}

// ErrorIn applies the In predicate on the "error" field.
func ErrorIn(vs ...string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldIn(FieldError, vs...))
}

// ErrorNotIn applies the NotIn predicate on the "error" field.
func ErrorNotIn(vs ...string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldNotIn(FieldError, vs...))
}

// ErrorGT applies the GT predicate on the "error" field.
func ErrorGT(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldGT(FieldError, v))
}

// ErrorGTE applies the GTE predicate on the "error" field.
func ErrorGTE(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldGTE(FieldError, v))
}

// ErrorLT applies the LT predicate on the "error" field.
func ErrorLT(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldLT(FieldError, v))
}

// ErrorLTE applies the LTE predicate on the "error" field.
func ErrorLTE(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldLTE(FieldError, v))
}

// ErrorContains applies the Contains predicate on the "error" field.
func ErrorContains(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldContains(FieldError, v))
}

// ErrorHasPrefix applies the HasPrefix predicate on the "error" field.
func ErrorHasPrefix(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldHasPrefix(FieldError, v))
}

// ErrorHasSuffix applies the HasSuffix predicate on the "error" field.
func ErrorHasSuffix(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldHasSuffix(FieldError, v))
}

// ErrorIsNil applies the IsNil predicate on the "error" field.
func ErrorIsNil() predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldIsNull(FieldError))
}

// ErrorNotNil applies the NotNil predicate on the "error" field.
func ErrorNotNil() predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldNotNull(FieldError))
}

// ErrorEqualFold applies the EqualFold predicate on the "error" field.
func ErrorEqualFold(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldEqualFold(FieldError, v))
}

// ErrorContainsFold applies the ContainsFold predicate on the "error" field.
func ErrorContainsFold(v string) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldContainsFold(FieldError, v))
}

// AttemptsEQ applies the EQ predicate on the "attempts" field.
func AttemptsEQ(v int) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldEQ(FieldAttempts, v))
}

// AttemptsNEQ applies the NEQ predicate on the "attempts" field.
func AttemptsNEQ(v int) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldNEQ(FieldAttempts, v))
}

// AttemptsIn applies the In predicate on the "attempts" field.
func AttemptsIn(vs ...int) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldIn(FieldAttempts, vs...))
}

// AttemptsNotIn applies the NotIn predicate on the "attempts" field.
func AttemptsNotIn(vs ...int) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldNotIn(FieldAttempts, vs...))
}

// AttemptsGT applies the GT predicate on the "attempts" field.
func AttemptsGT(v int) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldGT(FieldAttempts, v))
}

// AttemptsGTE applies the GTE predicate on the "attempts" field.
func AttemptsGTE(v int) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldGTE(FieldAttempts, v))
}

// AttemptsLT applies the LT predicate on the "attempts" field.
func AttemptsLT(v int) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldLT(FieldAttempts, v))
}

// AttemptsLTE applies the LTE predicate on the "attempts" field.
func AttemptsLTE(v int) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldLTE(FieldAttempts, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldLTE(FieldCreatedAt, v))
}

// ProcessedAtEQ applies the EQ predicate on the "processed_at" field.
func ProcessedAtEQ(v time.Time) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldEQ(FieldProcessedAt, v))
}

// ProcessedAtNEQ applies the NEQ predicate on the "processed_at" field.
func ProcessedAtNEQ(v time.Time) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldNEQ(FieldProcessedAt, v))
}

// ProcessedAtIn applies the In predicate on the "processed_at" field.
func ProcessedAtIn(vs ...time.Time) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldIn(FieldProcessedAt, vs...))
}

// ProcessedAtNotIn applies the NotIn predicate on the "processed_at" field.
func ProcessedAtNotIn(vs ...time.Time) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldNotIn(FieldProcessedAt, vs...))
}

// ProcessedAtGT applies the GT predicate on the "processed_at" field.
func ProcessedAtGT(v time.Time) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldGT(FieldProcessedAt, v))
}

// ProcessedAtGTE applies the GTE predicate on the "processed_at" field.
func ProcessedAtGTE(v time.Time) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldGTE(FieldProcessedAt, v))
}

// ProcessedAtLT applies the LT predicate on the "processed_at" field.
func ProcessedAtLT(v time.Time) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldLT(FieldProcessedAt, v))
}

// ProcessedAtLTE applies the LTE predicate on the "processed_at" field.
func ProcessedAtLTE(v time.Time) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldLTE(FieldProcessedAt, v))
}

// ProcessedAtIsNil applies the IsNil predicate on the "processed_at" field.
func ProcessedAtIsNil() predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldIsNull(FieldProcessedAt))
}

// ProcessedAtNotNil applies the NotNil predicate on the "processed_at" field.
func ProcessedAtNotNil() predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.FieldNotNull(FieldProcessedAt))
}

// HasExperience applies the HasEdge predicate on the "experience" edge.
func HasExperience() predicate.EnrichmentJob {
	return predicate.EnrichmentJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ExperienceTable, ExperienceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExperienceWith applies the HasEdge predicate on the "experience" edge with a given conditions (other predicates).
func HasExperienceWith(preds ...predicate.ExperienceData) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(func(s *sql.Selector) {
		step := newExperienceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EnrichmentJob) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EnrichmentJob) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EnrichmentJob) predicate.EnrichmentJob {
	return predicate.EnrichmentJob(sql.NotPredicates(p))
}
